# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.35
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""
A DICOM library
"""

import _gdcm
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _gdcm.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _gdcm.PySwigIterator_value(*args)
    def incr(*args): return _gdcm.PySwigIterator_incr(*args)
    def decr(*args): return _gdcm.PySwigIterator_decr(*args)
    def distance(*args): return _gdcm.PySwigIterator_distance(*args)
    def equal(*args): return _gdcm.PySwigIterator_equal(*args)
    def copy(*args): return _gdcm.PySwigIterator_copy(*args)
    def next(*args): return _gdcm.PySwigIterator_next(*args)
    def previous(*args): return _gdcm.PySwigIterator_previous(*args)
    def advance(*args): return _gdcm.PySwigIterator_advance(*args)
    def __eq__(*args): return _gdcm.PySwigIterator___eq__(*args)
    def __ne__(*args): return _gdcm.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _gdcm.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _gdcm.PySwigIterator___isub__(*args)
    def __add__(*args): return _gdcm.PySwigIterator___add__(*args)
    def __sub__(*args): return _gdcm.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _gdcm.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class SwapCode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwapCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwapCode, name)
    __repr__ = _swig_repr
    Unknown = _gdcm.SwapCode_Unknown
    LittleEndian = _gdcm.SwapCode_LittleEndian
    BigEndian = _gdcm.SwapCode_BigEndian
    BadLittleEndian = _gdcm.SwapCode_BadLittleEndian
    BadBigEndian = _gdcm.SwapCode_BadBigEndian
    def __init__(self, *args): 
        this = _gdcm.new_SwapCode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["GetSwapCodeString"] = lambda x: _gdcm.SwapCode_GetSwapCodeString
    if _newclass:GetSwapCodeString = staticmethod(_gdcm.SwapCode_GetSwapCodeString)
    __swig_destroy__ = _gdcm.delete_SwapCode
    __del__ = lambda self : None;
SwapCode_swigregister = _gdcm.SwapCode_swigregister
SwapCode_swigregister(SwapCode)
SwapCode_GetSwapCodeString = _gdcm.SwapCode_GetSwapCodeString

class PixelFormat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelFormat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelFormat, name)
    __repr__ = _swig_repr
    UINT8 = _gdcm.PixelFormat_UINT8
    INT8 = _gdcm.PixelFormat_INT8
    UINT12 = _gdcm.PixelFormat_UINT12
    INT12 = _gdcm.PixelFormat_INT12
    UINT16 = _gdcm.PixelFormat_UINT16
    INT16 = _gdcm.PixelFormat_INT16
    UINT32 = _gdcm.PixelFormat_UINT32
    INT32 = _gdcm.PixelFormat_INT32
    FLOAT16 = _gdcm.PixelFormat_FLOAT16
    FLOAT32 = _gdcm.PixelFormat_FLOAT32
    FLOAT64 = _gdcm.PixelFormat_FLOAT64
    UNKNOWN = _gdcm.PixelFormat_UNKNOWN
    def __init__(self, *args): 
        this = _gdcm.new_PixelFormat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_PixelFormat
    __del__ = lambda self : None;
    def GetSamplesPerPixel(*args): return _gdcm.PixelFormat_GetSamplesPerPixel(*args)
    def SetSamplesPerPixel(*args): return _gdcm.PixelFormat_SetSamplesPerPixel(*args)
    def GetBitsAllocated(*args): return _gdcm.PixelFormat_GetBitsAllocated(*args)
    def SetBitsAllocated(*args): return _gdcm.PixelFormat_SetBitsAllocated(*args)
    def GetBitsStored(*args): return _gdcm.PixelFormat_GetBitsStored(*args)
    def SetBitsStored(*args): return _gdcm.PixelFormat_SetBitsStored(*args)
    def GetHighBit(*args): return _gdcm.PixelFormat_GetHighBit(*args)
    def SetHighBit(*args): return _gdcm.PixelFormat_SetHighBit(*args)
    def GetPixelRepresentation(*args): return _gdcm.PixelFormat_GetPixelRepresentation(*args)
    def SetPixelRepresentation(*args): return _gdcm.PixelFormat_SetPixelRepresentation(*args)
    def GetScalarType(*args): return _gdcm.PixelFormat_GetScalarType(*args)
    def SetScalarType(*args): return _gdcm.PixelFormat_SetScalarType(*args)
    def GetScalarTypeAsString(*args): return _gdcm.PixelFormat_GetScalarTypeAsString(*args)
    def GetPixelSize(*args): return _gdcm.PixelFormat_GetPixelSize(*args)
    def Print(*args): return _gdcm.PixelFormat_Print(*args)
    def GetMin(*args): return _gdcm.PixelFormat_GetMin(*args)
    def GetMax(*args): return _gdcm.PixelFormat_GetMax(*args)
PixelFormat_swigregister = _gdcm.PixelFormat_swigregister
PixelFormat_swigregister(PixelFormat)

class MediaStorage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaStorage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MediaStorage, name)
    __repr__ = _swig_repr
    MediaStorageDirectoryStorage = _gdcm.MediaStorage_MediaStorageDirectoryStorage
    ComputedRadiographyImageStorage = _gdcm.MediaStorage_ComputedRadiographyImageStorage
    DigitalXRayImageStorageForPresentation = _gdcm.MediaStorage_DigitalXRayImageStorageForPresentation
    DigitalXRayImageStorageForProcessing = _gdcm.MediaStorage_DigitalXRayImageStorageForProcessing
    DigitalMammographyImageStorageForPresentation = _gdcm.MediaStorage_DigitalMammographyImageStorageForPresentation
    DigitalMammographyImageStorageForProcessing = _gdcm.MediaStorage_DigitalMammographyImageStorageForProcessing
    DigitalIntraoralXrayImageStorageForPresentation = _gdcm.MediaStorage_DigitalIntraoralXrayImageStorageForPresentation
    DigitalIntraoralXRayImageStorageForProcessing = _gdcm.MediaStorage_DigitalIntraoralXRayImageStorageForProcessing
    CTImageStorage = _gdcm.MediaStorage_CTImageStorage
    EnhancedCTImageStorage = _gdcm.MediaStorage_EnhancedCTImageStorage
    UltrasoundMultiFrameImageStorageRetired = _gdcm.MediaStorage_UltrasoundMultiFrameImageStorageRetired
    UltrasoundMultiFrameImageStorage = _gdcm.MediaStorage_UltrasoundMultiFrameImageStorage
    MRImageStorage = _gdcm.MediaStorage_MRImageStorage
    EnhancedMRImageStorage = _gdcm.MediaStorage_EnhancedMRImageStorage
    MRSpectroscopyStorage = _gdcm.MediaStorage_MRSpectroscopyStorage
    NuclearMedicineImageStorageRetired = _gdcm.MediaStorage_NuclearMedicineImageStorageRetired
    UltrasoundImageStorageRetired = _gdcm.MediaStorage_UltrasoundImageStorageRetired
    UltrasoundImageStorage = _gdcm.MediaStorage_UltrasoundImageStorage
    SecondaryCaptureImageStorage = _gdcm.MediaStorage_SecondaryCaptureImageStorage
    MultiframeSingleBitSecondaryCaptureImageStorage = _gdcm.MediaStorage_MultiframeSingleBitSecondaryCaptureImageStorage
    MultiframeGrayscaleByteSecondaryCaptureImageStorage = _gdcm.MediaStorage_MultiframeGrayscaleByteSecondaryCaptureImageStorage
    MultiframeGrayscaleWordSecondaryCaptureImageStorage = _gdcm.MediaStorage_MultiframeGrayscaleWordSecondaryCaptureImageStorage
    MultiframeTrueColorSecondaryCaptureImageStorage = _gdcm.MediaStorage_MultiframeTrueColorSecondaryCaptureImageStorage
    StandaloneOverlayStorage = _gdcm.MediaStorage_StandaloneOverlayStorage
    StandaloneCurveStorage = _gdcm.MediaStorage_StandaloneCurveStorage
    LeadECGWaveformStorage = _gdcm.MediaStorage_LeadECGWaveformStorage
    GeneralECGWaveformStorage = _gdcm.MediaStorage_GeneralECGWaveformStorage
    AmbulatoryECGWaveformStorage = _gdcm.MediaStorage_AmbulatoryECGWaveformStorage
    HemodynamicWaveformStorage = _gdcm.MediaStorage_HemodynamicWaveformStorage
    CardiacElectrophysiologyWaveformStorage = _gdcm.MediaStorage_CardiacElectrophysiologyWaveformStorage
    BasicVoiceAudioWaveformStorage = _gdcm.MediaStorage_BasicVoiceAudioWaveformStorage
    StandaloneModalityLUTStorage = _gdcm.MediaStorage_StandaloneModalityLUTStorage
    StandaloneVOILUTStorage = _gdcm.MediaStorage_StandaloneVOILUTStorage
    GrayscaleSoftcopyPresentationStateStorageSOPClass = _gdcm.MediaStorage_GrayscaleSoftcopyPresentationStateStorageSOPClass
    XRayAngiographicImageStorage = _gdcm.MediaStorage_XRayAngiographicImageStorage
    XRayRadiofluoroscopingImageStorage = _gdcm.MediaStorage_XRayRadiofluoroscopingImageStorage
    XRayAngiographicBiPlaneImageStorageRetired = _gdcm.MediaStorage_XRayAngiographicBiPlaneImageStorageRetired
    NuclearMedicineImageStorage = _gdcm.MediaStorage_NuclearMedicineImageStorage
    RawDataStorage = _gdcm.MediaStorage_RawDataStorage
    SpacialRegistrationStorage = _gdcm.MediaStorage_SpacialRegistrationStorage
    SpacialFiducialsStorage = _gdcm.MediaStorage_SpacialFiducialsStorage
    PETImageStorage = _gdcm.MediaStorage_PETImageStorage
    RTImageStorage = _gdcm.MediaStorage_RTImageStorage
    RTDoseStorage = _gdcm.MediaStorage_RTDoseStorage
    RTStructureSetStorage = _gdcm.MediaStorage_RTStructureSetStorage
    RTPlanStorage = _gdcm.MediaStorage_RTPlanStorage
    CSANonImageStorage = _gdcm.MediaStorage_CSANonImageStorage
    Philips3D = _gdcm.MediaStorage_Philips3D
    EnhancedSR = _gdcm.MediaStorage_EnhancedSR
    BasicTextSR = _gdcm.MediaStorage_BasicTextSR
    HardcopyGrayscaleImageStorage = _gdcm.MediaStorage_HardcopyGrayscaleImageStorage
    ComprehensiveSR = _gdcm.MediaStorage_ComprehensiveSR
    DetachedStudyManagementSOPClass = _gdcm.MediaStorage_DetachedStudyManagementSOPClass
    EncapsulatedPDFStorage = _gdcm.MediaStorage_EncapsulatedPDFStorage
    StudyComponentManagementSOPClass = _gdcm.MediaStorage_StudyComponentManagementSOPClass
    DetachedVisitManagementSOPClass = _gdcm.MediaStorage_DetachedVisitManagementSOPClass
    DetachedPatientManagementSOPClass = _gdcm.MediaStorage_DetachedPatientManagementSOPClass
    VideoEndoscopicImageStorage = _gdcm.MediaStorage_VideoEndoscopicImageStorage
    GeneralElectricMagneticResonanceImageStorage = _gdcm.MediaStorage_GeneralElectricMagneticResonanceImageStorage
    GEPrivate3DModelStorage = _gdcm.MediaStorage_GEPrivate3DModelStorage
    ToshibaPrivateDataStorage = _gdcm.MediaStorage_ToshibaPrivateDataStorage
    MammographyCADSR = _gdcm.MediaStorage_MammographyCADSR
    MS_END = _gdcm.MediaStorage_MS_END
    NoObject = _gdcm.MediaStorage_NoObject
    Video = _gdcm.MediaStorage_Video
    Waveform = _gdcm.MediaStorage_Waveform
    Audio = _gdcm.MediaStorage_Audio
    PDF = _gdcm.MediaStorage_PDF
    URI = _gdcm.MediaStorage_URI
    Segmentation = _gdcm.MediaStorage_Segmentation
    ObjectEnd = _gdcm.MediaStorage_ObjectEnd
    __swig_getmethods__["GetMSString"] = lambda x: _gdcm.MediaStorage_GetMSString
    if _newclass:GetMSString = staticmethod(_gdcm.MediaStorage_GetMSString)
    def GetString(*args): return _gdcm.MediaStorage_GetString(*args)
    __swig_getmethods__["GetMSType"] = lambda x: _gdcm.MediaStorage_GetMSType
    if _newclass:GetMSType = staticmethod(_gdcm.MediaStorage_GetMSType)
    def __init__(self, *args): 
        this = _gdcm.new_MediaStorage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["IsImage"] = lambda x: _gdcm.MediaStorage_IsImage
    if _newclass:IsImage = staticmethod(_gdcm.MediaStorage_IsImage)
    def GetModality(*args): return _gdcm.MediaStorage_GetModality(*args)
    def SetFromFile(*args): return _gdcm.MediaStorage_SetFromFile(*args)
    def SetFromDataSet(*args): return _gdcm.MediaStorage_SetFromDataSet(*args)
    def SetFromHeader(*args): return _gdcm.MediaStorage_SetFromHeader(*args)
    def SetFromModality(*args): return _gdcm.MediaStorage_SetFromModality(*args)
    def SetFromSourceImageSequence(*args): return _gdcm.MediaStorage_SetFromSourceImageSequence(*args)
    def GuessFromModality(*args): return _gdcm.MediaStorage_GuessFromModality(*args)
    __swig_destroy__ = _gdcm.delete_MediaStorage
    __del__ = lambda self : None;
MediaStorage_swigregister = _gdcm.MediaStorage_swigregister
MediaStorage_swigregister(MediaStorage)
MediaStorage_GetMSString = _gdcm.MediaStorage_GetMSString
MediaStorage_GetMSType = _gdcm.MediaStorage_GetMSType
MediaStorage_IsImage = _gdcm.MediaStorage_IsImage

class Tag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tag, name)
    __repr__ = _swig_repr
    def GetGroup(*args): return _gdcm.Tag_GetGroup(*args)
    def GetElement(*args): return _gdcm.Tag_GetElement(*args)
    def SetGroup(*args): return _gdcm.Tag_SetGroup(*args)
    def SetElement(*args): return _gdcm.Tag_SetElement(*args)
    def GetElementTag(*args): return _gdcm.Tag_GetElementTag(*args)
    def SetElementTag(*args): return _gdcm.Tag_SetElementTag(*args)
    def __getitem__(*args): return _gdcm.Tag___getitem__(*args)
    def __eq__(*args): return _gdcm.Tag___eq__(*args)
    def __ne__(*args): return _gdcm.Tag___ne__(*args)
    def __lt__(*args): return _gdcm.Tag___lt__(*args)
    def __le__(*args): return _gdcm.Tag___le__(*args)
    def __init__(self, *args): 
        this = _gdcm.new_Tag(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetLength(*args): return _gdcm.Tag_GetLength(*args)
    def IsPublic(*args): return _gdcm.Tag_IsPublic(*args)
    def IsPrivate(*args): return _gdcm.Tag_IsPrivate(*args)
    def GetPrivateCreator(*args): return _gdcm.Tag_GetPrivateCreator(*args)
    def SetPrivateCreator(*args): return _gdcm.Tag_SetPrivateCreator(*args)
    def IsPrivateCreator(*args): return _gdcm.Tag_IsPrivateCreator(*args)
    def IsGroupXX(*args): return _gdcm.Tag_IsGroupXX(*args)
    def ReadFromCommaSeparatedString(*args): return _gdcm.Tag_ReadFromCommaSeparatedString(*args)
    def __str__(*args): return _gdcm.Tag___str__(*args)
    __swig_destroy__ = _gdcm.delete_Tag
    __del__ = lambda self : None;
Tag_swigregister = _gdcm.Tag_swigregister
Tag_swigregister(Tag)

class PrivateTag(Tag):
    __swig_setmethods__ = {}
    for _s in [Tag]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrivateTag, name, value)
    __swig_getmethods__ = {}
    for _s in [Tag]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PrivateTag, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_PrivateTag(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetOwner(*args): return _gdcm.PrivateTag_GetOwner(*args)
    def SetOwner(*args): return _gdcm.PrivateTag_SetOwner(*args)
    def __lt__(*args): return _gdcm.PrivateTag___lt__(*args)
    __swig_destroy__ = _gdcm.delete_PrivateTag
    __del__ = lambda self : None;
PrivateTag_swigregister = _gdcm.PrivateTag_swigregister
PrivateTag_swigregister(PrivateTag)

class VL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VL, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_VL(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsUndefined(*args): return _gdcm.VL_IsUndefined(*args)
    def SetToUndefined(*args): return _gdcm.VL_SetToUndefined(*args)
    def IsOdd(*args): return _gdcm.VL_IsOdd(*args)
    def __iadd__(*args): return _gdcm.VL___iadd__(*args)
    def GetLength(*args): return _gdcm.VL_GetLength(*args)
    __swig_destroy__ = _gdcm.delete_VL
    __del__ = lambda self : None;
VL_swigregister = _gdcm.VL_swigregister
VL_swigregister(VL)

class VR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VR, name)
    __repr__ = _swig_repr
    INVALID = _gdcm.VR_INVALID
    AE = _gdcm.VR_AE
    AS = _gdcm.VR_AS
    AT = _gdcm.VR_AT
    CS = _gdcm.VR_CS
    DA = _gdcm.VR_DA
    DS = _gdcm.VR_DS
    DT = _gdcm.VR_DT
    FD = _gdcm.VR_FD
    FL = _gdcm.VR_FL
    IS = _gdcm.VR_IS
    LO = _gdcm.VR_LO
    LT = _gdcm.VR_LT
    OB = _gdcm.VR_OB
    OF = _gdcm.VR_OF
    OW = _gdcm.VR_OW
    PN = _gdcm.VR_PN
    SH = _gdcm.VR_SH
    SL = _gdcm.VR_SL
    SQ = _gdcm.VR_SQ
    SS = _gdcm.VR_SS
    ST = _gdcm.VR_ST
    TM = _gdcm.VR_TM
    UI = _gdcm.VR_UI
    UL = _gdcm.VR_UL
    UN = _gdcm.VR_UN
    US = _gdcm.VR_US
    UT = _gdcm.VR_UT
    OB_OW = _gdcm.VR_OB_OW
    US_SS = _gdcm.VR_US_SS
    US_SS_OW = _gdcm.VR_US_SS_OW
    VL32 = _gdcm.VR_VL32
    VRASCII = _gdcm.VR_VRASCII
    VRBINARY = _gdcm.VR_VRBINARY
    VR_VM1 = _gdcm.VR_VR_VM1
    VRALL = _gdcm.VR_VRALL
    VR_END = _gdcm.VR_VR_END
    __swig_getmethods__["GetVRString"] = lambda x: _gdcm.VR_GetVRString
    if _newclass:GetVRString = staticmethod(_gdcm.VR_GetVRString)
    __swig_getmethods__["GetVRTypeFromFile"] = lambda x: _gdcm.VR_GetVRTypeFromFile
    if _newclass:GetVRTypeFromFile = staticmethod(_gdcm.VR_GetVRTypeFromFile)
    __swig_getmethods__["GetVRType"] = lambda x: _gdcm.VR_GetVRType
    if _newclass:GetVRType = staticmethod(_gdcm.VR_GetVRType)
    __swig_getmethods__["GetVRStringFromFile"] = lambda x: _gdcm.VR_GetVRStringFromFile
    if _newclass:GetVRStringFromFile = staticmethod(_gdcm.VR_GetVRStringFromFile)
    __swig_getmethods__["IsValid"] = lambda x: _gdcm.VR_IsValid
    if _newclass:IsValid = staticmethod(_gdcm.VR_IsValid)
    __swig_getmethods__["IsSwap"] = lambda x: _gdcm.VR_IsSwap
    if _newclass:IsSwap = staticmethod(_gdcm.VR_IsSwap)
    def GetSizeof(*args): return _gdcm.VR_GetSizeof(*args)
    __swig_getmethods__["GetLength"] = lambda x: _gdcm.VR_GetLength
    if _newclass:GetLength = staticmethod(_gdcm.VR_GetLength)
    __swig_getmethods__["IsBinary"] = lambda x: _gdcm.VR_IsBinary
    if _newclass:IsBinary = staticmethod(_gdcm.VR_IsBinary)
    __swig_getmethods__["IsASCII"] = lambda x: _gdcm.VR_IsASCII
    if _newclass:IsASCII = staticmethod(_gdcm.VR_IsASCII)
    __swig_getmethods__["CanDisplay"] = lambda x: _gdcm.VR_CanDisplay
    if _newclass:CanDisplay = staticmethod(_gdcm.VR_CanDisplay)
    __swig_getmethods__["IsBinary2"] = lambda x: _gdcm.VR_IsBinary2
    if _newclass:IsBinary2 = staticmethod(_gdcm.VR_IsBinary2)
    __swig_getmethods__["IsASCII2"] = lambda x: _gdcm.VR_IsASCII2
    if _newclass:IsASCII2 = staticmethod(_gdcm.VR_IsASCII2)
    def __init__(self, *args): 
        this = _gdcm.new_VR(*args)
        try: self.this.append(this)
        except: self.this = this
    def Read(*args): return _gdcm.VR_Read(*args)
    def Write(*args): return _gdcm.VR_Write(*args)
    def GetSize(*args): return _gdcm.VR_GetSize(*args)
    def Compatible(*args): return _gdcm.VR_Compatible(*args)
    def __str__(*args): return _gdcm.VR___str__(*args)
    __swig_destroy__ = _gdcm.delete_VR
    __del__ = lambda self : None;
VR_swigregister = _gdcm.VR_swigregister
VR_swigregister(VR)
VR_GetVRString = _gdcm.VR_GetVRString
VR_GetVRTypeFromFile = _gdcm.VR_GetVRTypeFromFile
VR_GetVRType = _gdcm.VR_GetVRType
VR_GetVRStringFromFile = _gdcm.VR_GetVRStringFromFile
VR_IsValid = _gdcm.VR_IsValid
VR_IsSwap = _gdcm.VR_IsSwap
VR_GetLength = _gdcm.VR_GetLength
VR_IsBinary = _gdcm.VR_IsBinary
VR_IsASCII = _gdcm.VR_IsASCII
VR_CanDisplay = _gdcm.VR_CanDisplay
VR_IsBinary2 = _gdcm.VR_IsBinary2
VR_IsASCII2 = _gdcm.VR_IsASCII2

class VM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VM, name)
    __repr__ = _swig_repr
    VM0 = _gdcm.VM_VM0
    VM1 = _gdcm.VM_VM1
    VM2 = _gdcm.VM_VM2
    VM3 = _gdcm.VM_VM3
    VM4 = _gdcm.VM_VM4
    VM5 = _gdcm.VM_VM5
    VM6 = _gdcm.VM_VM6
    VM8 = _gdcm.VM_VM8
    VM9 = _gdcm.VM_VM9
    VM10 = _gdcm.VM_VM10
    VM12 = _gdcm.VM_VM12
    VM16 = _gdcm.VM_VM16
    VM18 = _gdcm.VM_VM18
    VM24 = _gdcm.VM_VM24
    VM28 = _gdcm.VM_VM28
    VM32 = _gdcm.VM_VM32
    VM35 = _gdcm.VM_VM35
    VM99 = _gdcm.VM_VM99
    VM256 = _gdcm.VM_VM256
    VM1_2 = _gdcm.VM_VM1_2
    VM1_3 = _gdcm.VM_VM1_3
    VM1_4 = _gdcm.VM_VM1_4
    VM1_5 = _gdcm.VM_VM1_5
    VM1_8 = _gdcm.VM_VM1_8
    VM1_32 = _gdcm.VM_VM1_32
    VM1_99 = _gdcm.VM_VM1_99
    VM1_n = _gdcm.VM_VM1_n
    VM2_2n = _gdcm.VM_VM2_2n
    VM2_n = _gdcm.VM_VM2_n
    VM3_4 = _gdcm.VM_VM3_4
    VM3_3n = _gdcm.VM_VM3_3n
    VM3_n = _gdcm.VM_VM3_n
    VM4_4n = _gdcm.VM_VM4_4n
    VM6_6n = _gdcm.VM_VM6_6n
    VM7_7n = _gdcm.VM_VM7_7n
    VM30_30n = _gdcm.VM_VM30_30n
    VM47_47n = _gdcm.VM_VM47_47n
    VM_END = _gdcm.VM_VM_END
    __swig_getmethods__["GetVMString"] = lambda x: _gdcm.VM_GetVMString
    if _newclass:GetVMString = staticmethod(_gdcm.VM_GetVMString)
    __swig_getmethods__["GetVMType"] = lambda x: _gdcm.VM_GetVMType
    if _newclass:GetVMType = staticmethod(_gdcm.VM_GetVMType)
    __swig_getmethods__["IsValid"] = lambda x: _gdcm.VM_IsValid
    if _newclass:IsValid = staticmethod(_gdcm.VM_IsValid)
    def Compatible(*args): return _gdcm.VM_Compatible(*args)
    __swig_getmethods__["GetVMTypeFromLength"] = lambda x: _gdcm.VM_GetVMTypeFromLength
    if _newclass:GetVMTypeFromLength = staticmethod(_gdcm.VM_GetVMTypeFromLength)
    __swig_getmethods__["GetNumberOfElementsFromArray"] = lambda x: _gdcm.VM_GetNumberOfElementsFromArray
    if _newclass:GetNumberOfElementsFromArray = staticmethod(_gdcm.VM_GetNumberOfElementsFromArray)
    def __init__(self, *args): 
        this = _gdcm.new_VM(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetLength(*args): return _gdcm.VM_GetLength(*args)
    __swig_destroy__ = _gdcm.delete_VM
    __del__ = lambda self : None;
VM_swigregister = _gdcm.VM_swigregister
VM_swigregister(VM)
VM_GetVMString = _gdcm.VM_GetVMString
VM_GetVMType = _gdcm.VM_GetVMType
VM_IsValid = _gdcm.VM_IsValid
VM_GetVMTypeFromLength = _gdcm.VM_GetVMTypeFromLength
VM_GetNumberOfElementsFromArray = _gdcm.VM_GetNumberOfElementsFromArray

class FilenamesType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilenamesType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FilenamesType, name)
    __repr__ = _swig_repr
    def iterator(*args): return _gdcm.FilenamesType_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _gdcm.FilenamesType___nonzero__(*args)
    def __len__(*args): return _gdcm.FilenamesType___len__(*args)
    def pop(*args): return _gdcm.FilenamesType_pop(*args)
    def __getslice__(*args): return _gdcm.FilenamesType___getslice__(*args)
    def __setslice__(*args): return _gdcm.FilenamesType___setslice__(*args)
    def __delslice__(*args): return _gdcm.FilenamesType___delslice__(*args)
    def __delitem__(*args): return _gdcm.FilenamesType___delitem__(*args)
    def __getitem__(*args): return _gdcm.FilenamesType___getitem__(*args)
    def __setitem__(*args): return _gdcm.FilenamesType___setitem__(*args)
    def append(*args): return _gdcm.FilenamesType_append(*args)
    def empty(*args): return _gdcm.FilenamesType_empty(*args)
    def size(*args): return _gdcm.FilenamesType_size(*args)
    def clear(*args): return _gdcm.FilenamesType_clear(*args)
    def swap(*args): return _gdcm.FilenamesType_swap(*args)
    def get_allocator(*args): return _gdcm.FilenamesType_get_allocator(*args)
    def begin(*args): return _gdcm.FilenamesType_begin(*args)
    def end(*args): return _gdcm.FilenamesType_end(*args)
    def rbegin(*args): return _gdcm.FilenamesType_rbegin(*args)
    def rend(*args): return _gdcm.FilenamesType_rend(*args)
    def pop_back(*args): return _gdcm.FilenamesType_pop_back(*args)
    def erase(*args): return _gdcm.FilenamesType_erase(*args)
    def __init__(self, *args): 
        this = _gdcm.new_FilenamesType(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _gdcm.FilenamesType_push_back(*args)
    def front(*args): return _gdcm.FilenamesType_front(*args)
    def back(*args): return _gdcm.FilenamesType_back(*args)
    def assign(*args): return _gdcm.FilenamesType_assign(*args)
    def resize(*args): return _gdcm.FilenamesType_resize(*args)
    def insert(*args): return _gdcm.FilenamesType_insert(*args)
    def reserve(*args): return _gdcm.FilenamesType_reserve(*args)
    def capacity(*args): return _gdcm.FilenamesType_capacity(*args)
    __swig_destroy__ = _gdcm.delete_FilenamesType
    __del__ = lambda self : None;
FilenamesType_swigregister = _gdcm.FilenamesType_swigregister
FilenamesType_swigregister(FilenamesType)

class Directory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Directory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Directory, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Directory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Directory
    __del__ = lambda self : None;
    def Print(*args): return _gdcm.Directory_Print(*args)
    def GetToplevel(*args): return _gdcm.Directory_GetToplevel(*args)
    def GetFilenames(*args): return _gdcm.Directory_GetFilenames(*args)
    def GetDirectories(*args): return _gdcm.Directory_GetDirectories(*args)
    def Load(*args): return _gdcm.Directory_Load(*args)
    def __str__(*args): return _gdcm.Directory___str__(*args)
Directory_swigregister = _gdcm.Directory_swigregister
Directory_swigregister(Directory)

class Object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Object(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Object
    __del__ = lambda self : None;
    def Register(*args): return _gdcm.Object_Register(*args)
    def UnRegister(*args): return _gdcm.Object_UnRegister(*args)
    def Print(*args): return _gdcm.Object_Print(*args)
Object_swigregister = _gdcm.Object_swigregister
Object_swigregister(Object)

class Value(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Value, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Value, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _gdcm.delete_Value
    __del__ = lambda self : None;
    def GetLength(*args): return _gdcm.Value_GetLength(*args)
    def SetLength(*args): return _gdcm.Value_SetLength(*args)
    def Clear(*args): return _gdcm.Value_Clear(*args)
    def __str__(*args): return _gdcm.Value___str__(*args)
Value_swigregister = _gdcm.Value_swigregister
Value_swigregister(Value)

class ByteValue(Value):
    __swig_setmethods__ = {}
    for _s in [Value]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteValue, name, value)
    __swig_getmethods__ = {}
    for _s in [Value]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ByteValue, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_ByteValue(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_ByteValue
    __del__ = lambda self : None;
    def PrintASCII(*args): return _gdcm.ByteValue_PrintASCII(*args)
    def PrintHex(*args): return _gdcm.ByteValue_PrintHex(*args)
    def PrintGroupLength(*args): return _gdcm.ByteValue_PrintGroupLength(*args)
    def IsEmpty(*args): return _gdcm.ByteValue_IsEmpty(*args)
    def GetLength(*args): return _gdcm.ByteValue_GetLength(*args)
    def SetLength(*args): return _gdcm.ByteValue_SetLength(*args)
    def __eq__(*args): return _gdcm.ByteValue___eq__(*args)
    def Clear(*args): return _gdcm.ByteValue_Clear(*args)
    def GetPointer(*args): return _gdcm.ByteValue_GetPointer(*args)
    def GetBuffer(*args): return _gdcm.ByteValue_GetBuffer(*args)
    def WriteBuffer(*args): return _gdcm.ByteValue_WriteBuffer(*args)
    def IsPrintable(*args): return _gdcm.ByteValue_IsPrintable(*args)
    def __str__(*args): return _gdcm.ByteValue___str__(*args)
ByteValue_swigregister = _gdcm.ByteValue_swigregister
ByteValue_swigregister(ByteValue)

class DataElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataElement, name)
    __repr__ = _swig_repr
    def GetTag(*args): return _gdcm.DataElement_GetTag(*args)
    def SetTag(*args): return _gdcm.DataElement_SetTag(*args)
    def GetVL(*args): return _gdcm.DataElement_GetVL(*args)
    def SetVL(*args): return _gdcm.DataElement_SetVL(*args)
    def SetVLToUndefined(*args): return _gdcm.DataElement_SetVLToUndefined(*args)
    def GetVR(*args): return _gdcm.DataElement_GetVR(*args)
    def SetVR(*args): return _gdcm.DataElement_SetVR(*args)
    def GetValue(*args): return _gdcm.DataElement_GetValue(*args)
    def SetValue(*args): return _gdcm.DataElement_SetValue(*args)
    def IsEmpty(*args): return _gdcm.DataElement_IsEmpty(*args)
    def SetByteValue(*args): return _gdcm.DataElement_SetByteValue(*args)
    def GetByteValue(*args): return _gdcm.DataElement_GetByteValue(*args)
    def GetSequenceOfItems(*args): return _gdcm.DataElement_GetSequenceOfItems(*args)
    def GetSequenceOfFragments(*args): return _gdcm.DataElement_GetSequenceOfFragments(*args)
    def IsUndefinedLength(*args): return _gdcm.DataElement_IsUndefinedLength(*args)
    def __init__(self, *args): 
        this = _gdcm.new_DataElement(*args)
        try: self.this.append(this)
        except: self.this = this
    def __lt__(*args): return _gdcm.DataElement___lt__(*args)
    def __eq__(*args): return _gdcm.DataElement___eq__(*args)
    def __str__(*args): return _gdcm.DataElement___str__(*args)
    __swig_destroy__ = _gdcm.delete_DataElement
    __del__ = lambda self : None;
DataElement_swigregister = _gdcm.DataElement_swigregister
DataElement_swigregister(DataElement)

class Item(DataElement):
    __swig_setmethods__ = {}
    for _s in [DataElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Item, name, value)
    __swig_getmethods__ = {}
    for _s in [DataElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Item, name)
    __repr__ = _swig_repr
    def Clear(*args): return _gdcm.Item_Clear(*args)
    def InsertDataElement(*args): return _gdcm.Item_InsertDataElement(*args)
    def GetDataElement(*args): return _gdcm.Item_GetDataElement(*args)
    def SetNestedDataSet(*args): return _gdcm.Item_SetNestedDataSet(*args)
    def GetNestedDataSet(*args): return _gdcm.Item_GetNestedDataSet(*args)
    def __init__(self, *args): 
        this = _gdcm.new_Item(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(*args): return _gdcm.Item___str__(*args)
    __swig_destroy__ = _gdcm.delete_Item
    __del__ = lambda self : None;
Item_swigregister = _gdcm.Item_swigregister
Item_swigregister(Item)

class SequenceOfItems(Value):
    __swig_setmethods__ = {}
    for _s in [Value]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceOfItems, name, value)
    __swig_getmethods__ = {}
    for _s in [Value]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceOfItems, name)
    __repr__ = _swig_repr
    def Begin(*args): return _gdcm.SequenceOfItems_Begin(*args)
    def End(*args): return _gdcm.SequenceOfItems_End(*args)
    def __init__(self, *args): 
        this = _gdcm.new_SequenceOfItems(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetLength(*args): return _gdcm.SequenceOfItems_GetLength(*args)
    def SetLength(*args): return _gdcm.SequenceOfItems_SetLength(*args)
    def SetLengthToUndefined(*args): return _gdcm.SequenceOfItems_SetLengthToUndefined(*args)
    def Clear(*args): return _gdcm.SequenceOfItems_Clear(*args)
    def AddItem(*args): return _gdcm.SequenceOfItems_AddItem(*args)
    def GetNumberOfItems(*args): return _gdcm.SequenceOfItems_GetNumberOfItems(*args)
    def GetItem(*args): return _gdcm.SequenceOfItems_GetItem(*args)
    __swig_setmethods__["SequenceLengthField"] = _gdcm.SequenceOfItems_SequenceLengthField_set
    __swig_getmethods__["SequenceLengthField"] = _gdcm.SequenceOfItems_SequenceLengthField_get
    if _newclass:SequenceLengthField = _swig_property(_gdcm.SequenceOfItems_SequenceLengthField_get, _gdcm.SequenceOfItems_SequenceLengthField_set)
    __swig_setmethods__["Items"] = _gdcm.SequenceOfItems_Items_set
    __swig_getmethods__["Items"] = _gdcm.SequenceOfItems_Items_get
    if _newclass:Items = _swig_property(_gdcm.SequenceOfItems_Items_get, _gdcm.SequenceOfItems_Items_set)
    def __str__(*args): return _gdcm.SequenceOfItems___str__(*args)
    __swig_destroy__ = _gdcm.delete_SequenceOfItems
    __del__ = lambda self : None;
SequenceOfItems_swigregister = _gdcm.SequenceOfItems_swigregister
SequenceOfItems_swigregister(SequenceOfItems)

class DataSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSet, name)
    __repr__ = _swig_repr
    def Begin(*args): return _gdcm.DataSet_Begin(*args)
    def End(*args): return _gdcm.DataSet_End(*args)
    def GetDES(*args): return _gdcm.DataSet_GetDES(*args)
    def Clear(*args): return _gdcm.DataSet_Clear(*args)
    def Size(*args): return _gdcm.DataSet_Size(*args)
    def Print(*args): return _gdcm.DataSet_Print(*args)
    def Insert(*args): return _gdcm.DataSet_Insert(*args)
    def Replace(*args): return _gdcm.DataSet_Replace(*args)
    def Remove(*args): return _gdcm.DataSet_Remove(*args)
    def __call__(*args): return _gdcm.DataSet___call__(*args)
    def GetPrivateCreator(*args): return _gdcm.DataSet_GetPrivateCreator(*args)
    def GetDataElement(*args): return _gdcm.DataSet_GetDataElement(*args)
    def FindDataElement(*args): return _gdcm.DataSet_FindDataElement(*args)
    def FindNextDataElement(*args): return _gdcm.DataSet_FindNextDataElement(*args)
    def IsEmpty(*args): return _gdcm.DataSet_IsEmpty(*args)
    def __str__(*args): return _gdcm.DataSet___str__(*args)
    def __init__(self, *args): 
        this = _gdcm.new_DataSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_DataSet
    __del__ = lambda self : None;
DataSet_swigregister = _gdcm.DataSet_swigregister
DataSet_swigregister(DataSet)

class PythonDataSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PythonDataSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PythonDataSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_PythonDataSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetCurrent(*args): return _gdcm.PythonDataSet_GetCurrent(*args)
    def Start(*args): return _gdcm.PythonDataSet_Start(*args)
    def IsAtEnd(*args): return _gdcm.PythonDataSet_IsAtEnd(*args)
    def Next(*args): return _gdcm.PythonDataSet_Next(*args)
    __swig_destroy__ = _gdcm.delete_PythonDataSet
    __del__ = lambda self : None;
PythonDataSet_swigregister = _gdcm.PythonDataSet_swigregister
PythonDataSet_swigregister(PythonDataSet)

class PhotometricInterpretation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhotometricInterpretation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhotometricInterpretation, name)
    __repr__ = _swig_repr
    UNKNOW = _gdcm.PhotometricInterpretation_UNKNOW
    MONOCHROME1 = _gdcm.PhotometricInterpretation_MONOCHROME1
    MONOCHROME2 = _gdcm.PhotometricInterpretation_MONOCHROME2
    PALETTE_COLOR = _gdcm.PhotometricInterpretation_PALETTE_COLOR
    RGB = _gdcm.PhotometricInterpretation_RGB
    HSV = _gdcm.PhotometricInterpretation_HSV
    ARGB = _gdcm.PhotometricInterpretation_ARGB
    CMYK = _gdcm.PhotometricInterpretation_CMYK
    YBR_FULL = _gdcm.PhotometricInterpretation_YBR_FULL
    YBR_FULL_422 = _gdcm.PhotometricInterpretation_YBR_FULL_422
    YBR_PARTIAL_422 = _gdcm.PhotometricInterpretation_YBR_PARTIAL_422
    YBR_PARTIAL_420 = _gdcm.PhotometricInterpretation_YBR_PARTIAL_420
    YBR_ICT = _gdcm.PhotometricInterpretation_YBR_ICT
    YBR_RCT = _gdcm.PhotometricInterpretation_YBR_RCT
    PI_END = _gdcm.PhotometricInterpretation_PI_END
    def __init__(self, *args): 
        this = _gdcm.new_PhotometricInterpretation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["GetPIString"] = lambda x: _gdcm.PhotometricInterpretation_GetPIString
    if _newclass:GetPIString = staticmethod(_gdcm.PhotometricInterpretation_GetPIString)
    __swig_getmethods__["GetPIType"] = lambda x: _gdcm.PhotometricInterpretation_GetPIType
    if _newclass:GetPIType = staticmethod(_gdcm.PhotometricInterpretation_GetPIType)
    __swig_getmethods__["IsRetired"] = lambda x: _gdcm.PhotometricInterpretation_IsRetired
    if _newclass:IsRetired = staticmethod(_gdcm.PhotometricInterpretation_IsRetired)
    def GetSamplesPerPixel(*args): return _gdcm.PhotometricInterpretation_GetSamplesPerPixel(*args)
    __swig_destroy__ = _gdcm.delete_PhotometricInterpretation
    __del__ = lambda self : None;
PhotometricInterpretation_swigregister = _gdcm.PhotometricInterpretation_swigregister
PhotometricInterpretation_swigregister(PhotometricInterpretation)
PhotometricInterpretation_GetPIString = _gdcm.PhotometricInterpretation_GetPIString
PhotometricInterpretation_GetPIType = _gdcm.PhotometricInterpretation_GetPIType
PhotometricInterpretation_IsRetired = _gdcm.PhotometricInterpretation_IsRetired

class LookupTable(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LookupTable, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LookupTable, name)
    __repr__ = _swig_repr
    RED = _gdcm.LookupTable_RED
    GREEN = _gdcm.LookupTable_GREEN
    BLUE = _gdcm.LookupTable_BLUE
    GRAY = _gdcm.LookupTable_GRAY
    UNKNOWN = _gdcm.LookupTable_UNKNOWN
    __swig_destroy__ = _gdcm.delete_LookupTable
    __del__ = lambda self : None;
    def Print(*args): return _gdcm.LookupTable_Print(*args)
    def Allocate(*args): return _gdcm.LookupTable_Allocate(*args)
    def InitializeLUT(*args): return _gdcm.LookupTable_InitializeLUT(*args)
    def GetLUTLength(*args): return _gdcm.LookupTable_GetLUTLength(*args)
    def SetLUT(*args): return _gdcm.LookupTable_SetLUT(*args)
    def GetLUT(*args): return _gdcm.LookupTable_GetLUT(*args)
    def GetLUTDescriptor(*args): return _gdcm.LookupTable_GetLUTDescriptor(*args)
    def InitializeRedLUT(*args): return _gdcm.LookupTable_InitializeRedLUT(*args)
    def SetRedLUT(*args): return _gdcm.LookupTable_SetRedLUT(*args)
    def InitializeGreenLUT(*args): return _gdcm.LookupTable_InitializeGreenLUT(*args)
    def SetGreenLUT(*args): return _gdcm.LookupTable_SetGreenLUT(*args)
    def InitializeBlueLUT(*args): return _gdcm.LookupTable_InitializeBlueLUT(*args)
    def SetBlueLUT(*args): return _gdcm.LookupTable_SetBlueLUT(*args)
    def Decode(*args): return _gdcm.LookupTable_Decode(*args)
    def __init__(self, *args): 
        this = _gdcm.new_LookupTable(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetBufferAsRGBA(*args): return _gdcm.LookupTable_GetBufferAsRGBA(*args)
    def GetPointer(*args): return _gdcm.LookupTable_GetPointer(*args)
    def WriteBufferAsRGBA(*args): return _gdcm.LookupTable_WriteBufferAsRGBA(*args)
LookupTable_swigregister = _gdcm.LookupTable_swigregister
LookupTable_swigregister(LookupTable)

class Overlay(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Overlay, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Overlay, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gdcm.delete_Overlay
    __del__ = lambda self : None;
    def Print(*args): return _gdcm.Overlay_Print(*args)
    __swig_getmethods__["GetNumberOfOverlays"] = lambda x: _gdcm.Overlay_GetNumberOfOverlays
    if _newclass:GetNumberOfOverlays = staticmethod(_gdcm.Overlay_GetNumberOfOverlays)
    def Update(*args): return _gdcm.Overlay_Update(*args)
    def SetGroup(*args): return _gdcm.Overlay_SetGroup(*args)
    def GetGroup(*args): return _gdcm.Overlay_GetGroup(*args)
    def SetRows(*args): return _gdcm.Overlay_SetRows(*args)
    def GetRows(*args): return _gdcm.Overlay_GetRows(*args)
    def SetColumns(*args): return _gdcm.Overlay_SetColumns(*args)
    def GetColumns(*args): return _gdcm.Overlay_GetColumns(*args)
    def SetNumberOfFrames(*args): return _gdcm.Overlay_SetNumberOfFrames(*args)
    def SetDescription(*args): return _gdcm.Overlay_SetDescription(*args)
    def GetDescription(*args): return _gdcm.Overlay_GetDescription(*args)
    def SetType(*args): return _gdcm.Overlay_SetType(*args)
    def GetType(*args): return _gdcm.Overlay_GetType(*args)
    def SetOrigin(*args): return _gdcm.Overlay_SetOrigin(*args)
    def GetOrigin(*args): return _gdcm.Overlay_GetOrigin(*args)
    def SetFrameOrigin(*args): return _gdcm.Overlay_SetFrameOrigin(*args)
    def SetBitsAllocated(*args): return _gdcm.Overlay_SetBitsAllocated(*args)
    def GetBitsAllocated(*args): return _gdcm.Overlay_GetBitsAllocated(*args)
    def SetBitPosition(*args): return _gdcm.Overlay_SetBitPosition(*args)
    def GetBitPosition(*args): return _gdcm.Overlay_GetBitPosition(*args)
    def SetOverlay(*args): return _gdcm.Overlay_SetOverlay(*args)
    def GrabOverlayFromPixelData(*args): return _gdcm.Overlay_GrabOverlayFromPixelData(*args)
    def GetOverlayData(*args): return _gdcm.Overlay_GetOverlayData(*args)
    def IsEmpty(*args): return _gdcm.Overlay_IsEmpty(*args)
    def IsInPixelData(*args): return _gdcm.Overlay_IsInPixelData(*args)
    def Decode(*args): return _gdcm.Overlay_Decode(*args)
    def Decompress(*args): return _gdcm.Overlay_Decompress(*args)
    def GetBuffer(*args): return _gdcm.Overlay_GetBuffer(*args)
    def GetUnpackBuffer(*args): return _gdcm.Overlay_GetUnpackBuffer(*args)
    def __init__(self, *args): 
        this = _gdcm.new_Overlay(*args)
        try: self.this.append(this)
        except: self.this = this
Overlay_swigregister = _gdcm.Overlay_swigregister
Overlay_swigregister(Overlay)
Overlay_GetNumberOfOverlays = _gdcm.Overlay_GetNumberOfOverlays

class DataElementSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataElementSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataElementSet, name)
    __repr__ = _swig_repr
    def iterator(*args): return _gdcm.DataElementSet_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _gdcm.DataElementSet___nonzero__(*args)
    def __len__(*args): return _gdcm.DataElementSet___len__(*args)
    def append(*args): return _gdcm.DataElementSet_append(*args)
    def __contains__(*args): return _gdcm.DataElementSet___contains__(*args)
    def __getitem__(*args): return _gdcm.DataElementSet___getitem__(*args)
    def __init__(self, *args): 
        this = _gdcm.new_DataElementSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args): return _gdcm.DataElementSet_empty(*args)
    def size(*args): return _gdcm.DataElementSet_size(*args)
    def clear(*args): return _gdcm.DataElementSet_clear(*args)
    def swap(*args): return _gdcm.DataElementSet_swap(*args)
    def count(*args): return _gdcm.DataElementSet_count(*args)
    def begin(*args): return _gdcm.DataElementSet_begin(*args)
    def end(*args): return _gdcm.DataElementSet_end(*args)
    def rbegin(*args): return _gdcm.DataElementSet_rbegin(*args)
    def rend(*args): return _gdcm.DataElementSet_rend(*args)
    def erase(*args): return _gdcm.DataElementSet_erase(*args)
    def find(*args): return _gdcm.DataElementSet_find(*args)
    def lower_bound(*args): return _gdcm.DataElementSet_lower_bound(*args)
    def upper_bound(*args): return _gdcm.DataElementSet_upper_bound(*args)
    def equal_range(*args): return _gdcm.DataElementSet_equal_range(*args)
    def insert(*args): return _gdcm.DataElementSet_insert(*args)
    __swig_destroy__ = _gdcm.delete_DataElementSet
    __del__ = lambda self : None;
DataElementSet_swigregister = _gdcm.DataElementSet_swigregister
DataElementSet_swigregister(DataElementSet)

class Preamble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Preamble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Preamble, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gdcm.delete_Preamble
    __del__ = lambda self : None;
    def Clear(*args): return _gdcm.Preamble_Clear(*args)
    def Valid(*args): return _gdcm.Preamble_Valid(*args)
    def Create(*args): return _gdcm.Preamble_Create(*args)
    def Remove(*args): return _gdcm.Preamble_Remove(*args)
    def Read(*args): return _gdcm.Preamble_Read(*args)
    def Write(*args): return _gdcm.Preamble_Write(*args)
    def Print(*args): return _gdcm.Preamble_Print(*args)
    def GetInternal(*args): return _gdcm.Preamble_GetInternal(*args)
    def IsEmpty(*args): return _gdcm.Preamble_IsEmpty(*args)
    def __init__(self, *args): 
        this = _gdcm.new_Preamble(*args)
        try: self.this.append(this)
        except: self.this = this
Preamble_swigregister = _gdcm.Preamble_swigregister
Preamble_swigregister(Preamble)

class FileMetaInformation(DataSet):
    __swig_setmethods__ = {}
    for _s in [DataSet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileMetaInformation, name, value)
    __swig_getmethods__ = {}
    for _s in [DataSet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileMetaInformation, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gdcm.delete_FileMetaInformation
    __del__ = lambda self : None;
    def IsValid(*args): return _gdcm.FileMetaInformation_IsValid(*args)
    def GetMetaInformationTS(*args): return _gdcm.FileMetaInformation_GetMetaInformationTS(*args)
    def SetDataSetTransferSyntax(*args): return _gdcm.FileMetaInformation_SetDataSetTransferSyntax(*args)
    def GetDataSetTransferSyntax(*args): return _gdcm.FileMetaInformation_GetDataSetTransferSyntax(*args)
    def GetMediaStorage(*args): return _gdcm.FileMetaInformation_GetMediaStorage(*args)
    def Insert(*args): return _gdcm.FileMetaInformation_Insert(*args)
    def Replace(*args): return _gdcm.FileMetaInformation_Replace(*args)
    def Read(*args): return _gdcm.FileMetaInformation_Read(*args)
    def ReadCompat(*args): return _gdcm.FileMetaInformation_ReadCompat(*args)
    def Write(*args): return _gdcm.FileMetaInformation_Write(*args)
    def FillFromDataSet(*args): return _gdcm.FileMetaInformation_FillFromDataSet(*args)
    def GetPreamble(*args): return _gdcm.FileMetaInformation_GetPreamble(*args)
    def SetPreamble(*args): return _gdcm.FileMetaInformation_SetPreamble(*args)
    __swig_getmethods__["SetImplementationClassUID"] = lambda x: _gdcm.FileMetaInformation_SetImplementationClassUID
    if _newclass:SetImplementationClassUID = staticmethod(_gdcm.FileMetaInformation_SetImplementationClassUID)
    __swig_getmethods__["AppendImplementationClassUID"] = lambda x: _gdcm.FileMetaInformation_AppendImplementationClassUID
    if _newclass:AppendImplementationClassUID = staticmethod(_gdcm.FileMetaInformation_AppendImplementationClassUID)
    __swig_getmethods__["GetImplementationClassUID"] = lambda x: _gdcm.FileMetaInformation_GetImplementationClassUID
    if _newclass:GetImplementationClassUID = staticmethod(_gdcm.FileMetaInformation_GetImplementationClassUID)
    __swig_getmethods__["SetImplementationVersionName"] = lambda x: _gdcm.FileMetaInformation_SetImplementationVersionName
    if _newclass:SetImplementationVersionName = staticmethod(_gdcm.FileMetaInformation_SetImplementationVersionName)
    __swig_getmethods__["GetImplementationVersionName"] = lambda x: _gdcm.FileMetaInformation_GetImplementationVersionName
    if _newclass:GetImplementationVersionName = staticmethod(_gdcm.FileMetaInformation_GetImplementationVersionName)
    __swig_getmethods__["SetSourceApplicationEntityTitle"] = lambda x: _gdcm.FileMetaInformation_SetSourceApplicationEntityTitle
    if _newclass:SetSourceApplicationEntityTitle = staticmethod(_gdcm.FileMetaInformation_SetSourceApplicationEntityTitle)
    __swig_getmethods__["GetSourceApplicationEntityTitle"] = lambda x: _gdcm.FileMetaInformation_GetSourceApplicationEntityTitle
    if _newclass:GetSourceApplicationEntityTitle = staticmethod(_gdcm.FileMetaInformation_GetSourceApplicationEntityTitle)
    def __init__(self, *args): 
        this = _gdcm.new_FileMetaInformation(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(*args): return _gdcm.FileMetaInformation___str__(*args)
FileMetaInformation_swigregister = _gdcm.FileMetaInformation_swigregister
FileMetaInformation_swigregister(FileMetaInformation)
FileMetaInformation_SetImplementationClassUID = _gdcm.FileMetaInformation_SetImplementationClassUID
FileMetaInformation_AppendImplementationClassUID = _gdcm.FileMetaInformation_AppendImplementationClassUID
FileMetaInformation_GetImplementationClassUID = _gdcm.FileMetaInformation_GetImplementationClassUID
FileMetaInformation_SetImplementationVersionName = _gdcm.FileMetaInformation_SetImplementationVersionName
FileMetaInformation_GetImplementationVersionName = _gdcm.FileMetaInformation_GetImplementationVersionName
FileMetaInformation_SetSourceApplicationEntityTitle = _gdcm.FileMetaInformation_SetSourceApplicationEntityTitle
FileMetaInformation_GetSourceApplicationEntityTitle = _gdcm.FileMetaInformation_GetSourceApplicationEntityTitle

class File(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, File, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, File, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_File(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_File
    __del__ = lambda self : None;
    def Read(*args): return _gdcm.File_Read(*args)
    def Write(*args): return _gdcm.File_Write(*args)
    def GetHeader(*args): return _gdcm.File_GetHeader(*args)
    def SetHeader(*args): return _gdcm.File_SetHeader(*args)
    def GetDataSet(*args): return _gdcm.File_GetDataSet(*args)
    def SetDataSet(*args): return _gdcm.File_SetDataSet(*args)
    def __str__(*args): return _gdcm.File___str__(*args)
File_swigregister = _gdcm.File_swigregister
File_swigregister(File)

class Image(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Image(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Image
    __del__ = lambda self : None;
    def GetNumberOfDimensions(*args): return _gdcm.Image_GetNumberOfDimensions(*args)
    def SetNumberOfDimensions(*args): return _gdcm.Image_SetNumberOfDimensions(*args)
    def GetDimensions(*args): return _gdcm.Image_GetDimensions(*args)
    def GetDimension(*args): return _gdcm.Image_GetDimension(*args)
    def SetDimensions(*args): return _gdcm.Image_SetDimensions(*args)
    def SetDimension(*args): return _gdcm.Image_SetDimension(*args)
    def GetPixelFormat(*args): return _gdcm.Image_GetPixelFormat(*args)
    def SetPixelFormat(*args): return _gdcm.Image_SetPixelFormat(*args)
    def GetSpacing(*args): return _gdcm.Image_GetSpacing(*args)
    def SetSpacing(*args): return _gdcm.Image_SetSpacing(*args)
    def GetOrigin(*args): return _gdcm.Image_GetOrigin(*args)
    def SetOrigin(*args): return _gdcm.Image_SetOrigin(*args)
    def GetDirectionCosines(*args): return _gdcm.Image_GetDirectionCosines(*args)
    def SetDirectionCosines(*args): return _gdcm.Image_SetDirectionCosines(*args)
    def Print(*args): return _gdcm.Image_Print(*args)
    def GetPlanarConfiguration(*args): return _gdcm.Image_GetPlanarConfiguration(*args)
    def SetPlanarConfiguration(*args): return _gdcm.Image_SetPlanarConfiguration(*args)
    def GetPhotometricInterpretation(*args): return _gdcm.Image_GetPhotometricInterpretation(*args)
    def SetPhotometricInterpretation(*args): return _gdcm.Image_SetPhotometricInterpretation(*args)
    def GetSwapCode(*args): return _gdcm.Image_GetSwapCode(*args)
    def SetSwapCode(*args): return _gdcm.Image_SetSwapCode(*args)
    def GetNeedByteSwap(*args): return _gdcm.Image_GetNeedByteSwap(*args)
    def SetNeedByteSwap(*args): return _gdcm.Image_SetNeedByteSwap(*args)
    def SetLUT(*args): return _gdcm.Image_SetLUT(*args)
    def GetLUT(*args): return _gdcm.Image_GetLUT(*args)
    def GetCurve(*args): return _gdcm.Image_GetCurve(*args)
    def GetNumberOfCurves(*args): return _gdcm.Image_GetNumberOfCurves(*args)
    def SetNumberOfCurves(*args): return _gdcm.Image_SetNumberOfCurves(*args)
    def GetOverlay(*args): return _gdcm.Image_GetOverlay(*args)
    def GetNumberOfOverlays(*args): return _gdcm.Image_GetNumberOfOverlays(*args)
    def SetNumberOfOverlays(*args): return _gdcm.Image_SetNumberOfOverlays(*args)
    def AreOverlaysInPixelData(*args): return _gdcm.Image_AreOverlaysInPixelData(*args)
    def GetIconImage(*args): return _gdcm.Image_GetIconImage(*args)
    def GetBufferLength(*args): return _gdcm.Image_GetBufferLength(*args)
    def SetTransferSyntax(*args): return _gdcm.Image_SetTransferSyntax(*args)
    def GetTransferSyntax(*args): return _gdcm.Image_GetTransferSyntax(*args)
    def SetIntercept(*args): return _gdcm.Image_SetIntercept(*args)
    def GetIntercept(*args): return _gdcm.Image_GetIntercept(*args)
    def SetSlope(*args): return _gdcm.Image_SetSlope(*args)
    def GetSlope(*args): return _gdcm.Image_GetSlope(*args)
    def SetDataElement(*args): return _gdcm.Image_SetDataElement(*args)
    def GetDataElement(*args): return _gdcm.Image_GetDataElement(*args)
    def GetBuffer(*args): return _gdcm.Image_GetBuffer(*args)
    def __str__(*args): return _gdcm.Image___str__(*args)
Image_swigregister = _gdcm.Image_swigregister
Image_swigregister(Image)

class Fragment(DataElement):
    __swig_setmethods__ = {}
    for _s in [DataElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fragment, name, value)
    __swig_getmethods__ = {}
    for _s in [DataElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Fragment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Fragment(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetLength(*args): return _gdcm.Fragment_GetLength(*args)
    __swig_destroy__ = _gdcm.delete_Fragment
    __del__ = lambda self : None;
Fragment_swigregister = _gdcm.Fragment_swigregister
Fragment_swigregister(Fragment)

class CSAHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSAHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSAHeader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_CSAHeader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_CSAHeader
    __del__ = lambda self : None;
    UNKNOWN = _gdcm.CSAHeader_UNKNOWN
    SV10 = _gdcm.CSAHeader_SV10
    NOMAGIC = _gdcm.CSAHeader_NOMAGIC
    DATASET_FORMAT = _gdcm.CSAHeader_DATASET_FORMAT
    ZEROED_OUT = _gdcm.CSAHeader_ZEROED_OUT
    def Print(*args): return _gdcm.CSAHeader_Print(*args)
    def GetDataSet(*args): return _gdcm.CSAHeader_GetDataSet(*args)
    def GetFormat(*args): return _gdcm.CSAHeader_GetFormat(*args)
    __swig_getmethods__["GetCSAImageHeaderInfoTag"] = lambda x: _gdcm.CSAHeader_GetCSAImageHeaderInfoTag
    if _newclass:GetCSAImageHeaderInfoTag = staticmethod(_gdcm.CSAHeader_GetCSAImageHeaderInfoTag)
    __swig_getmethods__["GetCSASeriesHeaderInfoTag"] = lambda x: _gdcm.CSAHeader_GetCSASeriesHeaderInfoTag
    if _newclass:GetCSASeriesHeaderInfoTag = staticmethod(_gdcm.CSAHeader_GetCSASeriesHeaderInfoTag)
    def GetCSAElementByName(*args): return _gdcm.CSAHeader_GetCSAElementByName(*args)
CSAHeader_swigregister = _gdcm.CSAHeader_swigregister
CSAHeader_swigregister(CSAHeader)
CSAHeader_GetCSAImageHeaderInfoTag = _gdcm.CSAHeader_GetCSAImageHeaderInfoTag
CSAHeader_GetCSASeriesHeaderInfoTag = _gdcm.CSAHeader_GetCSASeriesHeaderInfoTag

class SequenceOfFragments(Value):
    __swig_setmethods__ = {}
    for _s in [Value]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceOfFragments, name, value)
    __swig_getmethods__ = {}
    for _s in [Value]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceOfFragments, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_SequenceOfFragments(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetLength(*args): return _gdcm.SequenceOfFragments_GetLength(*args)
    def SetLength(*args): return _gdcm.SequenceOfFragments_SetLength(*args)
    def Clear(*args): return _gdcm.SequenceOfFragments_Clear(*args)
    def AddFragment(*args): return _gdcm.SequenceOfFragments_AddFragment(*args)
    def ComputeByteLength(*args): return _gdcm.SequenceOfFragments_ComputeByteLength(*args)
    def ComputeLength(*args): return _gdcm.SequenceOfFragments_ComputeLength(*args)
    def GetBuffer(*args): return _gdcm.SequenceOfFragments_GetBuffer(*args)
    def GetFragBuffer(*args): return _gdcm.SequenceOfFragments_GetFragBuffer(*args)
    def GetNumberOfFragments(*args): return _gdcm.SequenceOfFragments_GetNumberOfFragments(*args)
    def GetFragment(*args): return _gdcm.SequenceOfFragments_GetFragment(*args)
    def WriteBuffer(*args): return _gdcm.SequenceOfFragments_WriteBuffer(*args)
    def GetTable(*args): return _gdcm.SequenceOfFragments_GetTable(*args)
    __swig_setmethods__["Table"] = _gdcm.SequenceOfFragments_Table_set
    __swig_getmethods__["Table"] = _gdcm.SequenceOfFragments_Table_get
    if _newclass:Table = _swig_property(_gdcm.SequenceOfFragments_Table_get, _gdcm.SequenceOfFragments_Table_set)
    __swig_setmethods__["SequenceLengthField"] = _gdcm.SequenceOfFragments_SequenceLengthField_set
    __swig_getmethods__["SequenceLengthField"] = _gdcm.SequenceOfFragments_SequenceLengthField_get
    if _newclass:SequenceLengthField = _swig_property(_gdcm.SequenceOfFragments_SequenceLengthField_get, _gdcm.SequenceOfFragments_SequenceLengthField_set)
    __swig_setmethods__["Fragments"] = _gdcm.SequenceOfFragments_Fragments_set
    __swig_getmethods__["Fragments"] = _gdcm.SequenceOfFragments_Fragments_get
    if _newclass:Fragments = _swig_property(_gdcm.SequenceOfFragments_Fragments_get, _gdcm.SequenceOfFragments_Fragments_set)
    __swig_destroy__ = _gdcm.delete_SequenceOfFragments
    __del__ = lambda self : None;
SequenceOfFragments_swigregister = _gdcm.SequenceOfFragments_swigregister
SequenceOfFragments_swigregister(SequenceOfFragments)

class TransferSyntax(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransferSyntax, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransferSyntax, name)
    __repr__ = _swig_repr
    Unknown = _gdcm.TransferSyntax_Unknown
    Explicit = _gdcm.TransferSyntax_Explicit
    Implicit = _gdcm.TransferSyntax_Implicit
    ImplicitVRLittleEndian = _gdcm.TransferSyntax_ImplicitVRLittleEndian
    ImplicitVRBigEndianPrivateGE = _gdcm.TransferSyntax_ImplicitVRBigEndianPrivateGE
    ExplicitVRLittleEndian = _gdcm.TransferSyntax_ExplicitVRLittleEndian
    DeflatedExplicitVRLittleEndian = _gdcm.TransferSyntax_DeflatedExplicitVRLittleEndian
    ExplicitVRBigEndian = _gdcm.TransferSyntax_ExplicitVRBigEndian
    JPEGBaselineProcess1 = _gdcm.TransferSyntax_JPEGBaselineProcess1
    JPEGExtendedProcess2_4 = _gdcm.TransferSyntax_JPEGExtendedProcess2_4
    JPEGExtendedProcess3_5 = _gdcm.TransferSyntax_JPEGExtendedProcess3_5
    JPEGSpectralSelectionProcess6_8 = _gdcm.TransferSyntax_JPEGSpectralSelectionProcess6_8
    JPEGFullProgressionProcess10_12 = _gdcm.TransferSyntax_JPEGFullProgressionProcess10_12
    JPEGLosslessProcess14 = _gdcm.TransferSyntax_JPEGLosslessProcess14
    JPEGLosslessProcess14_1 = _gdcm.TransferSyntax_JPEGLosslessProcess14_1
    JPEGLSLossless = _gdcm.TransferSyntax_JPEGLSLossless
    JPEGLSNearLossless = _gdcm.TransferSyntax_JPEGLSNearLossless
    JPEG2000Lossless = _gdcm.TransferSyntax_JPEG2000Lossless
    JPEG2000 = _gdcm.TransferSyntax_JPEG2000
    RLELossless = _gdcm.TransferSyntax_RLELossless
    MPEG2MainProfile = _gdcm.TransferSyntax_MPEG2MainProfile
    ImplicitVRBigEndianACRNEMA = _gdcm.TransferSyntax_ImplicitVRBigEndianACRNEMA
    TS_END = _gdcm.TransferSyntax_TS_END
    __swig_getmethods__["GetTSString"] = lambda x: _gdcm.TransferSyntax_GetTSString
    if _newclass:GetTSString = staticmethod(_gdcm.TransferSyntax_GetTSString)
    __swig_getmethods__["GetTSType"] = lambda x: _gdcm.TransferSyntax_GetTSType
    if _newclass:GetTSType = staticmethod(_gdcm.TransferSyntax_GetTSType)
    def GetNegociatedType(*args): return _gdcm.TransferSyntax_GetNegociatedType(*args)
    def GetSwapCode(*args): return _gdcm.TransferSyntax_GetSwapCode(*args)
    def IsValid(*args): return _gdcm.TransferSyntax_IsValid(*args)
    def __init__(self, *args): 
        this = _gdcm.new_TransferSyntax(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsEncoded(*args): return _gdcm.TransferSyntax_IsEncoded(*args)
    def IsImplicit(*args): return _gdcm.TransferSyntax_IsImplicit(*args)
    def IsExplicit(*args): return _gdcm.TransferSyntax_IsExplicit(*args)
    __swig_destroy__ = _gdcm.delete_TransferSyntax
    __del__ = lambda self : None;
TransferSyntax_swigregister = _gdcm.TransferSyntax_swigregister
TransferSyntax_swigregister(TransferSyntax)
TransferSyntax_GetTSString = _gdcm.TransferSyntax_GetTSString
TransferSyntax_GetTSType = _gdcm.TransferSyntax_GetTSType

class BasicOffsetTable(DataElement):
    __swig_setmethods__ = {}
    for _s in [DataElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicOffsetTable, name, value)
    __swig_getmethods__ = {}
    for _s in [DataElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasicOffsetTable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_BasicOffsetTable(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetLength(*args): return _gdcm.BasicOffsetTable_GetLength(*args)
    __swig_destroy__ = _gdcm.delete_BasicOffsetTable
    __del__ = lambda self : None;
BasicOffsetTable_swigregister = _gdcm.BasicOffsetTable_swigregister
BasicOffsetTable_swigregister(BasicOffsetTable)

class CSAElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSAElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSAElement, name)
    __repr__ = _swig_repr
    def GetKey(*args): return _gdcm.CSAElement_GetKey(*args)
    def SetKey(*args): return _gdcm.CSAElement_SetKey(*args)
    def GetName(*args): return _gdcm.CSAElement_GetName(*args)
    def SetName(*args): return _gdcm.CSAElement_SetName(*args)
    def GetVM(*args): return _gdcm.CSAElement_GetVM(*args)
    def SetVM(*args): return _gdcm.CSAElement_SetVM(*args)
    def GetVR(*args): return _gdcm.CSAElement_GetVR(*args)
    def SetVR(*args): return _gdcm.CSAElement_SetVR(*args)
    def GetSyngoDT(*args): return _gdcm.CSAElement_GetSyngoDT(*args)
    def SetSyngoDT(*args): return _gdcm.CSAElement_SetSyngoDT(*args)
    def GetNoOfItems(*args): return _gdcm.CSAElement_GetNoOfItems(*args)
    def SetNoOfItems(*args): return _gdcm.CSAElement_SetNoOfItems(*args)
    def GetValue(*args): return _gdcm.CSAElement_GetValue(*args)
    def SetValue(*args): return _gdcm.CSAElement_SetValue(*args)
    def IsEmpty(*args): return _gdcm.CSAElement_IsEmpty(*args)
    def SetByteValue(*args): return _gdcm.CSAElement_SetByteValue(*args)
    def GetByteValue(*args): return _gdcm.CSAElement_GetByteValue(*args)
    def __init__(self, *args): 
        this = _gdcm.new_CSAElement(*args)
        try: self.this.append(this)
        except: self.this = this
    def __lt__(*args): return _gdcm.CSAElement___lt__(*args)
    def __eq__(*args): return _gdcm.CSAElement___eq__(*args)
    __swig_destroy__ = _gdcm.delete_CSAElement
    __del__ = lambda self : None;
CSAElement_swigregister = _gdcm.CSAElement_swigregister
CSAElement_swigregister(CSAElement)

class FileSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_FileSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def AddFile(*args): return _gdcm.FileSet_AddFile(*args)
    __swig_destroy__ = _gdcm.delete_FileSet
    __del__ = lambda self : None;
FileSet_swigregister = _gdcm.FileSet_swigregister
FileSet_swigregister(FileSet)

class Global(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Global, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Global, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Global(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Global
    __del__ = lambda self : None;
    def GetDicts(*args): return _gdcm.Global_GetDicts(*args)
    def GetDefs(*args): return _gdcm.Global_GetDefs(*args)
    __swig_getmethods__["GetInstance"] = lambda x: _gdcm.Global_GetInstance
    if _newclass:GetInstance = staticmethod(_gdcm.Global_GetInstance)
Global_swigregister = _gdcm.Global_swigregister
Global_swigregister(Global)
Global_GetInstance = _gdcm.Global_GetInstance

class DictEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DictEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DictEntry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_DictEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetVR(*args): return _gdcm.DictEntry_GetVR(*args)
    def SetVR(*args): return _gdcm.DictEntry_SetVR(*args)
    def GetVM(*args): return _gdcm.DictEntry_GetVM(*args)
    def SetVM(*args): return _gdcm.DictEntry_SetVM(*args)
    def GetName(*args): return _gdcm.DictEntry_GetName(*args)
    def SetName(*args): return _gdcm.DictEntry_SetName(*args)
    def GetKeyword(*args): return _gdcm.DictEntry_GetKeyword(*args)
    def GetRetired(*args): return _gdcm.DictEntry_GetRetired(*args)
    def SetRetired(*args): return _gdcm.DictEntry_SetRetired(*args)
    def SetGroupXX(*args): return _gdcm.DictEntry_SetGroupXX(*args)
    def SetElementXX(*args): return _gdcm.DictEntry_SetElementXX(*args)
    def __str__(*args): return _gdcm.DictEntry___str__(*args)
    __swig_destroy__ = _gdcm.delete_DictEntry
    __del__ = lambda self : None;
DictEntry_swigregister = _gdcm.DictEntry_swigregister
DictEntry_swigregister(DictEntry)
cvar = _gdcm.cvar
GlobalInstance = cvar.GlobalInstance

class Dict(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dict, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dict, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Dict(*args)
        try: self.this.append(this)
        except: self.this = this
    def Begin(*args): return _gdcm.Dict_Begin(*args)
    def End(*args): return _gdcm.Dict_End(*args)
    def IsEmpty(*args): return _gdcm.Dict_IsEmpty(*args)
    def AddDictEntry(*args): return _gdcm.Dict_AddDictEntry(*args)
    def GetDictEntry(*args): return _gdcm.Dict_GetDictEntry(*args)
    def GetDictEntryByName(*args): return _gdcm.Dict_GetDictEntryByName(*args)
    __swig_destroy__ = _gdcm.delete_Dict
    __del__ = lambda self : None;
Dict_swigregister = _gdcm.Dict_swigregister
Dict_swigregister(Dict)

class PrivateDict(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrivateDict, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrivateDict, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_PrivateDict(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_PrivateDict
    __del__ = lambda self : None;
    def AddDictEntry(*args): return _gdcm.PrivateDict_AddDictEntry(*args)
    def GetDictEntry(*args): return _gdcm.PrivateDict_GetDictEntry(*args)
    def PrintXML(*args): return _gdcm.PrivateDict_PrintXML(*args)
    def IsEmpty(*args): return _gdcm.PrivateDict_IsEmpty(*args)
PrivateDict_swigregister = _gdcm.PrivateDict_swigregister
PrivateDict_swigregister(PrivateDict)

class Dicts(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dicts, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dicts, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Dicts(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Dicts
    __del__ = lambda self : None;
    def GetDictEntry(*args): return _gdcm.Dicts_GetDictEntry(*args)
    def GetPublicDict(*args): return _gdcm.Dicts_GetPublicDict(*args)
    def GetPrivateDict(*args): return _gdcm.Dicts_GetPrivateDict(*args)
    def IsEmpty(*args): return _gdcm.Dicts_IsEmpty(*args)
Dicts_swigregister = _gdcm.Dicts_swigregister
Dicts_swigregister(Dicts)

class Reader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Reader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Reader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Reader
    __del__ = lambda self : None;
    def Read(*args): return _gdcm.Reader_Read(*args)
    def SetFileName(*args): return _gdcm.Reader_SetFileName(*args)
    def GetFile(*args): return _gdcm.Reader_GetFile(*args)
    def SetFile(*args): return _gdcm.Reader_SetFile(*args)
    def ReadUpToTag(*args): return _gdcm.Reader_ReadUpToTag(*args)
Reader_swigregister = _gdcm.Reader_swigregister
Reader_swigregister(Reader)

class ImageReader(Reader):
    __swig_setmethods__ = {}
    for _s in [Reader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageReader, name, value)
    __swig_getmethods__ = {}
    for _s in [Reader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageReader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_ImageReader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_ImageReader
    __del__ = lambda self : None;
    def Read(*args): return _gdcm.ImageReader_Read(*args)
    def GetImage(*args): return _gdcm.ImageReader_GetImage(*args)
ImageReader_swigregister = _gdcm.ImageReader_swigregister
ImageReader_swigregister(ImageReader)

class Writer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Writer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Writer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Writer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Writer
    __del__ = lambda self : None;
    def Write(*args): return _gdcm.Writer_Write(*args)
    def SetFileName(*args): return _gdcm.Writer_SetFileName(*args)
    def SetFile(*args): return _gdcm.Writer_SetFile(*args)
    def GetFile(*args): return _gdcm.Writer_GetFile(*args)
    def SetCheckFileMetaInformation(*args): return _gdcm.Writer_SetCheckFileMetaInformation(*args)
Writer_swigregister = _gdcm.Writer_swigregister
Writer_swigregister(Writer)

class ImageWriter(Writer):
    __swig_setmethods__ = {}
    for _s in [Writer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [Writer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_ImageWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_ImageWriter
    __del__ = lambda self : None;
    def GetImage(*args): return _gdcm.ImageWriter_GetImage(*args)
    def SetImage(*args): return _gdcm.ImageWriter_SetImage(*args)
    def Write(*args): return _gdcm.ImageWriter_Write(*args)
ImageWriter_swigregister = _gdcm.ImageWriter_swigregister
ImageWriter_swigregister(ImageWriter)

class PairString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_PairString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _gdcm.PairString_first_set
    __swig_getmethods__["first"] = _gdcm.PairString_first_get
    if _newclass:first = _swig_property(_gdcm.PairString_first_get, _gdcm.PairString_first_set)
    __swig_setmethods__["second"] = _gdcm.PairString_second_set
    __swig_getmethods__["second"] = _gdcm.PairString_second_get
    if _newclass:second = _swig_property(_gdcm.PairString_second_get, _gdcm.PairString_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _gdcm.delete_PairString
    __del__ = lambda self : None;
PairString_swigregister = _gdcm.PairString_swigregister
PairString_swigregister(PairString)

class StringFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringFilter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_StringFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_StringFilter
    __del__ = lambda self : None;
    def UseDictAlways(*args): return _gdcm.StringFilter_UseDictAlways(*args)
    def SetDicts(*args): return _gdcm.StringFilter_SetDicts(*args)
    def ToString(*args): return _gdcm.StringFilter_ToString(*args)
    def ToStringPair(*args): return _gdcm.StringFilter_ToStringPair(*args)
    def FromString(*args): return _gdcm.StringFilter_FromString(*args)
    def SetFile(*args): return _gdcm.StringFilter_SetFile(*args)
    def GetFile(*args): return _gdcm.StringFilter_GetFile(*args)
StringFilter_swigregister = _gdcm.StringFilter_swigregister
StringFilter_swigregister(StringFilter)

class UIDGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UIDGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UIDGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_UIDGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["SetRoot"] = lambda x: _gdcm.UIDGenerator_SetRoot
    if _newclass:SetRoot = staticmethod(_gdcm.UIDGenerator_SetRoot)
    __swig_getmethods__["GetRoot"] = lambda x: _gdcm.UIDGenerator_GetRoot
    if _newclass:GetRoot = staticmethod(_gdcm.UIDGenerator_GetRoot)
    def Generate(*args): return _gdcm.UIDGenerator_Generate(*args)
    def Generate2(*args): return _gdcm.UIDGenerator_Generate2(*args)
    __swig_getmethods__["IsValid"] = lambda x: _gdcm.UIDGenerator_IsValid
    if _newclass:IsValid = staticmethod(_gdcm.UIDGenerator_IsValid)
    __swig_getmethods__["GetGDCMUID"] = lambda x: _gdcm.UIDGenerator_GetGDCMUID
    if _newclass:GetGDCMUID = staticmethod(_gdcm.UIDGenerator_GetGDCMUID)
    __swig_getmethods__["GenerateUUID"] = lambda x: _gdcm.UIDGenerator_GenerateUUID
    if _newclass:GenerateUUID = staticmethod(_gdcm.UIDGenerator_GenerateUUID)
    __swig_destroy__ = _gdcm.delete_UIDGenerator
    __del__ = lambda self : None;
UIDGenerator_swigregister = _gdcm.UIDGenerator_swigregister
UIDGenerator_swigregister(UIDGenerator)
UIDGenerator_SetRoot = _gdcm.UIDGenerator_SetRoot
UIDGenerator_GetRoot = _gdcm.UIDGenerator_GetRoot
UIDGenerator_IsValid = _gdcm.UIDGenerator_IsValid
UIDGenerator_GetGDCMUID = _gdcm.UIDGenerator_GetGDCMUID
UIDGenerator_GenerateUUID = _gdcm.UIDGenerator_GenerateUUID

class ValuesType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ValuesType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ValuesType, name)
    __repr__ = _swig_repr
    def iterator(*args): return _gdcm.ValuesType_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _gdcm.ValuesType___nonzero__(*args)
    def __len__(*args): return _gdcm.ValuesType___len__(*args)
    def append(*args): return _gdcm.ValuesType_append(*args)
    def __contains__(*args): return _gdcm.ValuesType___contains__(*args)
    def __getitem__(*args): return _gdcm.ValuesType___getitem__(*args)
    def __init__(self, *args): 
        this = _gdcm.new_ValuesType(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args): return _gdcm.ValuesType_empty(*args)
    def size(*args): return _gdcm.ValuesType_size(*args)
    def clear(*args): return _gdcm.ValuesType_clear(*args)
    def swap(*args): return _gdcm.ValuesType_swap(*args)
    def count(*args): return _gdcm.ValuesType_count(*args)
    def begin(*args): return _gdcm.ValuesType_begin(*args)
    def end(*args): return _gdcm.ValuesType_end(*args)
    def rbegin(*args): return _gdcm.ValuesType_rbegin(*args)
    def rend(*args): return _gdcm.ValuesType_rend(*args)
    def erase(*args): return _gdcm.ValuesType_erase(*args)
    def find(*args): return _gdcm.ValuesType_find(*args)
    def lower_bound(*args): return _gdcm.ValuesType_lower_bound(*args)
    def upper_bound(*args): return _gdcm.ValuesType_upper_bound(*args)
    def equal_range(*args): return _gdcm.ValuesType_equal_range(*args)
    def insert(*args): return _gdcm.ValuesType_insert(*args)
    __swig_destroy__ = _gdcm.delete_ValuesType
    __del__ = lambda self : None;
ValuesType_swigregister = _gdcm.ValuesType_swigregister
ValuesType_swigregister(ValuesType)

class Scanner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scanner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scanner, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Scanner(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Scanner
    __del__ = lambda self : None;
    def AddTag(*args): return _gdcm.Scanner_AddTag(*args)
    def ClearTags(*args): return _gdcm.Scanner_ClearTags(*args)
    def Scan(*args): return _gdcm.Scanner_Scan(*args)
    def Print(*args): return _gdcm.Scanner_Print(*args)
    def IsKey(*args): return _gdcm.Scanner_IsKey(*args)
    def GetKeys(*args): return _gdcm.Scanner_GetKeys(*args)
    def GetValues(*args): return _gdcm.Scanner_GetValues(*args)
    def Begin(*args): return _gdcm.Scanner_Begin(*args)
    def End(*args): return _gdcm.Scanner_End(*args)
    def GetMappings(*args): return _gdcm.Scanner_GetMappings(*args)
    def GetMapping(*args): return _gdcm.Scanner_GetMapping(*args)
    def GetValue(*args): return _gdcm.Scanner_GetValue(*args)
    def __str__(*args): return _gdcm.Scanner___str__(*args)
Scanner_swigregister = _gdcm.Scanner_swigregister
Scanner_swigregister(Scanner)

class PythonTagToValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PythonTagToValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PythonTagToValue, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_PythonTagToValue(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetCurrent(*args): return _gdcm.PythonTagToValue_GetCurrent(*args)
    def GetCurrentTag(*args): return _gdcm.PythonTagToValue_GetCurrentTag(*args)
    def GetCurrentValue(*args): return _gdcm.PythonTagToValue_GetCurrentValue(*args)
    def Start(*args): return _gdcm.PythonTagToValue_Start(*args)
    def IsAtEnd(*args): return _gdcm.PythonTagToValue_IsAtEnd(*args)
    def Next(*args): return _gdcm.PythonTagToValue_Next(*args)
    __swig_destroy__ = _gdcm.delete_PythonTagToValue
    __del__ = lambda self : None;
PythonTagToValue_swigregister = _gdcm.PythonTagToValue_swigregister
PythonTagToValue_swigregister(PythonTagToValue)

class Anonymizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Anonymizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Anonymizer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Anonymizer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Anonymizer
    __del__ = lambda self : None;
    def Empty(*args): return _gdcm.Anonymizer_Empty(*args)
    def Remove(*args): return _gdcm.Anonymizer_Remove(*args)
    def Replace(*args): return _gdcm.Anonymizer_Replace(*args)
    def RemovePrivateTags(*args): return _gdcm.Anonymizer_RemovePrivateTags(*args)
    def SetFile(*args): return _gdcm.Anonymizer_SetFile(*args)
    def GetFile(*args): return _gdcm.Anonymizer_GetFile(*args)
    def BasicApplicationLevelConfidentialityProfile(*args): return _gdcm.Anonymizer_BasicApplicationLevelConfidentialityProfile(*args)
Anonymizer_swigregister = _gdcm.Anonymizer_swigregister
Anonymizer_swigregister(Anonymizer)

class System(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, System, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, System, name)
    __repr__ = _swig_repr
    __swig_getmethods__["MakeDirectory"] = lambda x: _gdcm.System_MakeDirectory
    if _newclass:MakeDirectory = staticmethod(_gdcm.System_MakeDirectory)
    __swig_getmethods__["FileExists"] = lambda x: _gdcm.System_FileExists
    if _newclass:FileExists = staticmethod(_gdcm.System_FileExists)
    __swig_getmethods__["FileIsDirectory"] = lambda x: _gdcm.System_FileIsDirectory
    if _newclass:FileIsDirectory = staticmethod(_gdcm.System_FileIsDirectory)
    __swig_getmethods__["RemoveFile"] = lambda x: _gdcm.System_RemoveFile
    if _newclass:RemoveFile = staticmethod(_gdcm.System_RemoveFile)
    __swig_getmethods__["GetLastSystemError"] = lambda x: _gdcm.System_GetLastSystemError
    if _newclass:GetLastSystemError = staticmethod(_gdcm.System_GetLastSystemError)
    __swig_getmethods__["FileSize"] = lambda x: _gdcm.System_FileSize
    if _newclass:FileSize = staticmethod(_gdcm.System_FileSize)
    __swig_getmethods__["GetHardwareAddress"] = lambda x: _gdcm.System_GetHardwareAddress
    if _newclass:GetHardwareAddress = staticmethod(_gdcm.System_GetHardwareAddress)
    __swig_getmethods__["GetCurrentDateTime"] = lambda x: _gdcm.System_GetCurrentDateTime
    if _newclass:GetCurrentDateTime = staticmethod(_gdcm.System_GetCurrentDateTime)
    __swig_getmethods__["EncodeBytes"] = lambda x: _gdcm.System_EncodeBytes
    if _newclass:EncodeBytes = staticmethod(_gdcm.System_EncodeBytes)
    __swig_getmethods__["StrCaseCmp"] = lambda x: _gdcm.System_StrCaseCmp
    if _newclass:StrCaseCmp = staticmethod(_gdcm.System_StrCaseCmp)
    __swig_getmethods__["StrNCaseCmp"] = lambda x: _gdcm.System_StrNCaseCmp
    if _newclass:StrNCaseCmp = staticmethod(_gdcm.System_StrNCaseCmp)
    def __init__(self, *args): 
        this = _gdcm.new_System(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_System
    __del__ = lambda self : None;
System_swigregister = _gdcm.System_swigregister
System_swigregister(System)
System_MakeDirectory = _gdcm.System_MakeDirectory
System_FileExists = _gdcm.System_FileExists
System_FileIsDirectory = _gdcm.System_FileIsDirectory
System_RemoveFile = _gdcm.System_RemoveFile
System_GetLastSystemError = _gdcm.System_GetLastSystemError
System_FileSize = _gdcm.System_FileSize
System_GetHardwareAddress = _gdcm.System_GetHardwareAddress
System_GetCurrentDateTime = _gdcm.System_GetCurrentDateTime
System_EncodeBytes = _gdcm.System_EncodeBytes
System_StrCaseCmp = _gdcm.System_StrCaseCmp
System_StrNCaseCmp = _gdcm.System_StrNCaseCmp

class Trace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Trace, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Trace(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Trace
    __del__ = lambda self : None;
    __swig_getmethods__["SetDebug"] = lambda x: _gdcm.Trace_SetDebug
    if _newclass:SetDebug = staticmethod(_gdcm.Trace_SetDebug)
    __swig_getmethods__["DebugOn"] = lambda x: _gdcm.Trace_DebugOn
    if _newclass:DebugOn = staticmethod(_gdcm.Trace_DebugOn)
    __swig_getmethods__["DebugOff"] = lambda x: _gdcm.Trace_DebugOff
    if _newclass:DebugOff = staticmethod(_gdcm.Trace_DebugOff)
    __swig_getmethods__["GetDebugFlag"] = lambda x: _gdcm.Trace_GetDebugFlag
    if _newclass:GetDebugFlag = staticmethod(_gdcm.Trace_GetDebugFlag)
    __swig_getmethods__["SetWarning"] = lambda x: _gdcm.Trace_SetWarning
    if _newclass:SetWarning = staticmethod(_gdcm.Trace_SetWarning)
    __swig_getmethods__["WarningOn"] = lambda x: _gdcm.Trace_WarningOn
    if _newclass:WarningOn = staticmethod(_gdcm.Trace_WarningOn)
    __swig_getmethods__["WarningOff"] = lambda x: _gdcm.Trace_WarningOff
    if _newclass:WarningOff = staticmethod(_gdcm.Trace_WarningOff)
    __swig_getmethods__["GetWarningFlag"] = lambda x: _gdcm.Trace_GetWarningFlag
    if _newclass:GetWarningFlag = staticmethod(_gdcm.Trace_GetWarningFlag)
    __swig_getmethods__["SetError"] = lambda x: _gdcm.Trace_SetError
    if _newclass:SetError = staticmethod(_gdcm.Trace_SetError)
    __swig_getmethods__["ErrorOn"] = lambda x: _gdcm.Trace_ErrorOn
    if _newclass:ErrorOn = staticmethod(_gdcm.Trace_ErrorOn)
    __swig_getmethods__["ErrorOff"] = lambda x: _gdcm.Trace_ErrorOff
    if _newclass:ErrorOff = staticmethod(_gdcm.Trace_ErrorOff)
    __swig_getmethods__["GetErrorFlag"] = lambda x: _gdcm.Trace_GetErrorFlag
    if _newclass:GetErrorFlag = staticmethod(_gdcm.Trace_GetErrorFlag)
    __swig_getmethods__["GetDebugToFile"] = lambda x: _gdcm.Trace_GetDebugToFile
    if _newclass:GetDebugToFile = staticmethod(_gdcm.Trace_GetDebugToFile)
    __swig_getmethods__["GetDebugFile"] = lambda x: _gdcm.Trace_GetDebugFile
    if _newclass:GetDebugFile = staticmethod(_gdcm.Trace_GetDebugFile)
Trace_swigregister = _gdcm.Trace_swigregister
Trace_swigregister(Trace)
Trace_SetDebug = _gdcm.Trace_SetDebug
Trace_DebugOn = _gdcm.Trace_DebugOn
Trace_DebugOff = _gdcm.Trace_DebugOff
Trace_GetDebugFlag = _gdcm.Trace_GetDebugFlag
Trace_SetWarning = _gdcm.Trace_SetWarning
Trace_WarningOn = _gdcm.Trace_WarningOn
Trace_WarningOff = _gdcm.Trace_WarningOff
Trace_GetWarningFlag = _gdcm.Trace_GetWarningFlag
Trace_SetError = _gdcm.Trace_SetError
Trace_ErrorOn = _gdcm.Trace_ErrorOn
Trace_ErrorOff = _gdcm.Trace_ErrorOff
Trace_GetErrorFlag = _gdcm.Trace_GetErrorFlag
Trace_GetDebugToFile = _gdcm.Trace_GetDebugToFile
Trace_GetDebugFile = _gdcm.Trace_GetDebugFile

GDCM_FUNCTION = _gdcm.GDCM_FUNCTION
class UIDs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UIDs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UIDs, name)
    __repr__ = _swig_repr
    uid_1_2_840_10008_1_1 = _gdcm.UIDs_uid_1_2_840_10008_1_1
    uid_1_2_840_10008_1_2 = _gdcm.UIDs_uid_1_2_840_10008_1_2
    uid_1_2_840_10008_1_2_1 = _gdcm.UIDs_uid_1_2_840_10008_1_2_1
    uid_1_2_840_10008_1_2_1_99 = _gdcm.UIDs_uid_1_2_840_10008_1_2_1_99
    uid_1_2_840_10008_1_2_2 = _gdcm.UIDs_uid_1_2_840_10008_1_2_2
    uid_1_2_840_10008_1_2_4_50 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_50
    uid_1_2_840_10008_1_2_4_51 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_51
    uid_1_2_840_10008_1_2_4_52 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_52
    uid_1_2_840_10008_1_2_4_53 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_53
    uid_1_2_840_10008_1_2_4_54 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_54
    uid_1_2_840_10008_1_2_4_55 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_55
    uid_1_2_840_10008_1_2_4_56 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_56
    uid_1_2_840_10008_1_2_4_57 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_57
    uid_1_2_840_10008_1_2_4_58 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_58
    uid_1_2_840_10008_1_2_4_59 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_59
    uid_1_2_840_10008_1_2_4_60 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_60
    uid_1_2_840_10008_1_2_4_61 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_61
    uid_1_2_840_10008_1_2_4_62 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_62
    uid_1_2_840_10008_1_2_4_63 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_63
    uid_1_2_840_10008_1_2_4_64 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_64
    uid_1_2_840_10008_1_2_4_65 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_65
    uid_1_2_840_10008_1_2_4_66 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_66
    uid_1_2_840_10008_1_2_4_70 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_70
    uid_1_2_840_10008_1_2_4_80 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_80
    uid_1_2_840_10008_1_2_4_81 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_81
    uid_1_2_840_10008_1_2_4_90 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_90
    uid_1_2_840_10008_1_2_4_91 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_91
    uid_1_2_840_10008_1_2_4_92 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_92
    uid_1_2_840_10008_1_2_4_93 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_93
    uid_1_2_840_10008_1_2_4_94 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_94
    uid_1_2_840_10008_1_2_4_95 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_95
    uid_1_2_840_10008_1_2_4_100 = _gdcm.UIDs_uid_1_2_840_10008_1_2_4_100
    uid_1_2_840_10008_1_2_5 = _gdcm.UIDs_uid_1_2_840_10008_1_2_5
    uid_1_2_840_10008_1_2_6_1 = _gdcm.UIDs_uid_1_2_840_10008_1_2_6_1
    uid_1_2_840_10008_1_2_6_2 = _gdcm.UIDs_uid_1_2_840_10008_1_2_6_2
    uid_1_2_840_10008_1_3_10 = _gdcm.UIDs_uid_1_2_840_10008_1_3_10
    uid_1_2_840_10008_1_4_1_1 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_1
    uid_1_2_840_10008_1_4_1_2 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_2
    uid_1_2_840_10008_1_4_1_3 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_3
    uid_1_2_840_10008_1_4_1_4 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_4
    uid_1_2_840_10008_1_4_1_5 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_5
    uid_1_2_840_10008_1_4_1_6 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_6
    uid_1_2_840_10008_1_4_1_7 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_7
    uid_1_2_840_10008_1_4_1_8 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_8
    uid_1_2_840_10008_1_4_1_9 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_9
    uid_1_2_840_10008_1_4_1_10 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_10
    uid_1_2_840_10008_1_4_1_11 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_11
    uid_1_2_840_10008_1_4_1_12 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_12
    uid_1_2_840_10008_1_4_1_13 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_13
    uid_1_2_840_10008_1_4_1_14 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_14
    uid_1_2_840_10008_1_4_1_15 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_15
    uid_1_2_840_10008_1_4_1_16 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_16
    uid_1_2_840_10008_1_4_1_17 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_17
    uid_1_2_840_10008_1_4_1_18 = _gdcm.UIDs_uid_1_2_840_10008_1_4_1_18
    uid_1_2_840_10008_1_4_2_1 = _gdcm.UIDs_uid_1_2_840_10008_1_4_2_1
    uid_1_2_840_10008_1_4_2_2 = _gdcm.UIDs_uid_1_2_840_10008_1_4_2_2
    uid_1_2_840_10008_1_9 = _gdcm.UIDs_uid_1_2_840_10008_1_9
    uid_1_2_840_10008_1_20_1 = _gdcm.UIDs_uid_1_2_840_10008_1_20_1
    uid_1_2_840_10008_1_20_1_1 = _gdcm.UIDs_uid_1_2_840_10008_1_20_1_1
    uid_1_2_840_10008_1_20_2 = _gdcm.UIDs_uid_1_2_840_10008_1_20_2
    uid_1_2_840_10008_1_20_2_1 = _gdcm.UIDs_uid_1_2_840_10008_1_20_2_1
    uid_1_2_840_10008_1_40 = _gdcm.UIDs_uid_1_2_840_10008_1_40
    uid_1_2_840_10008_1_40_1 = _gdcm.UIDs_uid_1_2_840_10008_1_40_1
    uid_1_2_840_10008_1_42 = _gdcm.UIDs_uid_1_2_840_10008_1_42
    uid_1_2_840_10008_1_42_1 = _gdcm.UIDs_uid_1_2_840_10008_1_42_1
    uid_1_2_840_10008_2_6_1 = _gdcm.UIDs_uid_1_2_840_10008_2_6_1
    uid_1_2_840_10008_2_16_4 = _gdcm.UIDs_uid_1_2_840_10008_2_16_4
    uid_1_2_840_10008_3_1_1_1 = _gdcm.UIDs_uid_1_2_840_10008_3_1_1_1
    uid_1_2_840_10008_3_1_2_1_1 = _gdcm.UIDs_uid_1_2_840_10008_3_1_2_1_1
    uid_1_2_840_10008_3_1_2_1_4 = _gdcm.UIDs_uid_1_2_840_10008_3_1_2_1_4
    uid_1_2_840_10008_3_1_2_2_1 = _gdcm.UIDs_uid_1_2_840_10008_3_1_2_2_1
    uid_1_2_840_10008_3_1_2_3_1 = _gdcm.UIDs_uid_1_2_840_10008_3_1_2_3_1
    uid_1_2_840_10008_3_1_2_3_2 = _gdcm.UIDs_uid_1_2_840_10008_3_1_2_3_2
    uid_1_2_840_10008_3_1_2_3_3 = _gdcm.UIDs_uid_1_2_840_10008_3_1_2_3_3
    uid_1_2_840_10008_3_1_2_3_4 = _gdcm.UIDs_uid_1_2_840_10008_3_1_2_3_4
    uid_1_2_840_10008_3_1_2_3_5 = _gdcm.UIDs_uid_1_2_840_10008_3_1_2_3_5
    uid_1_2_840_10008_3_1_2_5_1 = _gdcm.UIDs_uid_1_2_840_10008_3_1_2_5_1
    uid_1_2_840_10008_3_1_2_5_4 = _gdcm.UIDs_uid_1_2_840_10008_3_1_2_5_4
    uid_1_2_840_10008_3_1_2_5_5 = _gdcm.UIDs_uid_1_2_840_10008_3_1_2_5_5
    uid_1_2_840_10008_3_1_2_6_1 = _gdcm.UIDs_uid_1_2_840_10008_3_1_2_6_1
    uid_1_2_840_10008_4_2 = _gdcm.UIDs_uid_1_2_840_10008_4_2
    uid_1_2_840_10008_5_1_1_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_1
    uid_1_2_840_10008_5_1_1_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_2
    uid_1_2_840_10008_5_1_1_4 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_4
    uid_1_2_840_10008_5_1_1_4_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_4_1
    uid_1_2_840_10008_5_1_1_4_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_4_2
    uid_1_2_840_10008_5_1_1_9 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_9
    uid_1_2_840_10008_5_1_1_9_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_9_1
    uid_1_2_840_10008_5_1_1_14 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_14
    uid_1_2_840_10008_5_1_1_15 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_15
    uid_1_2_840_10008_5_1_1_16 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_16
    uid_1_2_840_10008_5_1_1_16_376 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_16_376
    uid_1_2_840_10008_5_1_1_17 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_17
    uid_1_2_840_10008_5_1_1_17_376 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_17_376
    uid_1_2_840_10008_5_1_1_18 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_18
    uid_1_2_840_10008_5_1_1_18_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_18_1
    uid_1_2_840_10008_5_1_1_22 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_22
    uid_1_2_840_10008_5_1_1_23 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_23
    uid_1_2_840_10008_5_1_1_24 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_24
    uid_1_2_840_10008_5_1_1_24_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_24_1
    uid_1_2_840_10008_5_1_1_25 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_25
    uid_1_2_840_10008_5_1_1_26 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_26
    uid_1_2_840_10008_5_1_1_27 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_27
    uid_1_2_840_10008_5_1_1_29 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_29
    uid_1_2_840_10008_5_1_1_30 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_30
    uid_1_2_840_10008_5_1_1_31 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_31
    uid_1_2_840_10008_5_1_1_32 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_32
    uid_1_2_840_10008_5_1_1_33 = _gdcm.UIDs_uid_1_2_840_10008_5_1_1_33
    uid_1_2_840_10008_5_1_4_1_1_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_1
    uid_1_2_840_10008_5_1_4_1_1_1_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_1_1
    uid_1_2_840_10008_5_1_4_1_1_1_1_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_1_1_1
    uid_1_2_840_10008_5_1_4_1_1_1_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_1_2
    uid_1_2_840_10008_5_1_4_1_1_1_2_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_1_2_1
    uid_1_2_840_10008_5_1_4_1_1_1_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_1_3
    uid_1_2_840_10008_5_1_4_1_1_1_3_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_1_3_1
    uid_1_2_840_10008_5_1_4_1_1_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_2
    uid_1_2_840_10008_5_1_4_1_1_2_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_2_1
    uid_1_2_840_10008_5_1_4_1_1_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_3
    uid_1_2_840_10008_5_1_4_1_1_3_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_3_1
    uid_1_2_840_10008_5_1_4_1_1_4 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_4
    uid_1_2_840_10008_5_1_4_1_1_4_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_4_1
    uid_1_2_840_10008_5_1_4_1_1_4_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_4_2
    uid_1_2_840_10008_5_1_4_1_1_5 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_5
    uid_1_2_840_10008_5_1_4_1_1_6 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_6
    uid_1_2_840_10008_5_1_4_1_1_6_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_6_1
    uid_1_2_840_10008_5_1_4_1_1_7 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_7
    uid_1_2_840_10008_5_1_4_1_1_7_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_7_1
    uid_1_2_840_10008_5_1_4_1_1_7_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_7_2
    uid_1_2_840_10008_5_1_4_1_1_7_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_7_3
    uid_1_2_840_10008_5_1_4_1_1_7_4 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_7_4
    uid_1_2_840_10008_5_1_4_1_1_8 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_8
    uid_1_2_840_10008_5_1_4_1_1_9 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_9
    uid_1_2_840_10008_5_1_4_1_1_9_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_9_1
    uid_1_2_840_10008_5_1_4_1_1_9_1_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_9_1_1
    uid_1_2_840_10008_5_1_4_1_1_9_1_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_9_1_2
    uid_1_2_840_10008_5_1_4_1_1_9_1_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_9_1_3
    uid_1_2_840_10008_5_1_4_1_1_9_2_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_9_2_1
    uid_1_2_840_10008_5_1_4_1_1_9_3_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_9_3_1
    uid_1_2_840_10008_5_1_4_1_1_9_4_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_9_4_1
    uid_1_2_840_10008_5_1_4_1_1_10 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_10
    uid_1_2_840_10008_5_1_4_1_1_11 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_11
    uid_1_2_840_10008_5_1_4_1_1_11_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_11_1
    uid_1_2_840_10008_5_1_4_1_1_11_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_11_2
    uid_1_2_840_10008_5_1_4_1_1_11_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_11_3
    uid_1_2_840_10008_5_1_4_1_1_11_4 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_11_4
    uid_1_2_840_10008_5_1_4_1_1_12_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_12_1
    uid_1_2_840_10008_5_1_4_1_1_12_1_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_12_1_1
    uid_1_2_840_10008_5_1_4_1_1_12_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_12_2
    uid_1_2_840_10008_5_1_4_1_1_12_2_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_12_2_1
    uid_1_2_840_10008_5_1_4_1_1_13_1_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_13_1_1
    uid_1_2_840_10008_5_1_4_1_1_13_1_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_13_1_2
    uid_1_2_840_10008_5_1_4_1_1_12_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_12_3
    uid_1_2_840_10008_5_1_4_1_1_20 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_20
    uid_1_2_840_10008_5_1_4_1_1_66 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_66
    uid_1_2_840_10008_5_1_4_1_1_66_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_66_1
    uid_1_2_840_10008_5_1_4_1_1_66_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_66_2
    uid_1_2_840_10008_5_1_4_1_1_66_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_66_3
    uid_1_2_840_10008_5_1_4_1_1_66_4 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_66_4
    uid_1_2_840_10008_5_1_4_1_1_67 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_67
    uid_1_2_840_10008_5_1_4_1_1_77_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_77_1
    uid_1_2_840_10008_5_1_4_1_1_77_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_77_2
    uid_1_2_840_10008_5_1_4_1_1_77_1_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_77_1_1
    uid_1_2_840_10008_5_1_4_1_1_77_1_1_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_77_1_1_1
    uid_1_2_840_10008_5_1_4_1_1_77_1_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_77_1_2
    uid_1_2_840_10008_5_1_4_1_1_77_1_2_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_77_1_2_1
    uid_1_2_840_10008_5_1_4_1_1_77_1_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_77_1_3
    uid_1_2_840_10008_5_1_4_1_1_77_1_4 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_77_1_4
    uid_1_2_840_10008_5_1_4_1_1_77_1_4_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_77_1_4_1
    uid_1_2_840_10008_5_1_4_1_1_77_1_5_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_77_1_5_1
    uid_1_2_840_10008_5_1_4_1_1_77_1_5_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_77_1_5_2
    uid_1_2_840_10008_5_1_4_1_1_77_1_5_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_77_1_5_3
    uid_1_2_840_10008_5_1_4_1_1_77_1_5_4 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_77_1_5_4
    uid_1_2_840_10008_5_1_4_1_1_88_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_88_1
    uid_1_2_840_10008_5_1_4_1_1_88_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_88_2
    uid_1_2_840_10008_5_1_4_1_1_88_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_88_3
    uid_1_2_840_10008_5_1_4_1_1_88_4 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_88_4
    uid_1_2_840_10008_5_1_4_1_1_88_11 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_88_11
    uid_1_2_840_10008_5_1_4_1_1_88_22 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_88_22
    uid_1_2_840_10008_5_1_4_1_1_88_33 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_88_33
    uid_1_2_840_10008_5_1_4_1_1_88_40 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_88_40
    uid_1_2_840_10008_5_1_4_1_1_88_50 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_88_50
    uid_1_2_840_10008_5_1_4_1_1_88_59 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_88_59
    uid_1_2_840_10008_5_1_4_1_1_88_65 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_88_65
    uid_1_2_840_10008_5_1_4_1_1_88_67 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_88_67
    uid_1_2_840_10008_5_1_4_1_1_104_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_104_1
    uid_1_2_840_10008_5_1_4_1_1_104_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_104_2
    uid_1_2_840_10008_5_1_4_1_1_128 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_128
    uid_1_2_840_10008_5_1_4_1_1_129 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_129
    uid_1_2_840_10008_5_1_4_1_1_481_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_481_1
    uid_1_2_840_10008_5_1_4_1_1_481_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_481_2
    uid_1_2_840_10008_5_1_4_1_1_481_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_481_3
    uid_1_2_840_10008_5_1_4_1_1_481_4 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_481_4
    uid_1_2_840_10008_5_1_4_1_1_481_5 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_481_5
    uid_1_2_840_10008_5_1_4_1_1_481_6 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_481_6
    uid_1_2_840_10008_5_1_4_1_1_481_7 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_481_7
    uid_1_2_840_10008_5_1_4_1_1_481_8 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_481_8
    uid_1_2_840_10008_5_1_4_1_1_481_9 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_1_481_9
    uid_1_2_840_10008_5_1_4_1_2_1_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_2_1_1
    uid_1_2_840_10008_5_1_4_1_2_1_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_2_1_2
    uid_1_2_840_10008_5_1_4_1_2_1_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_2_1_3
    uid_1_2_840_10008_5_1_4_1_2_2_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_2_2_1
    uid_1_2_840_10008_5_1_4_1_2_2_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_2_2_2
    uid_1_2_840_10008_5_1_4_1_2_2_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_2_2_3
    uid_1_2_840_10008_5_1_4_1_2_3_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_2_3_1
    uid_1_2_840_10008_5_1_4_1_2_3_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_2_3_2
    uid_1_2_840_10008_5_1_4_1_2_3_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_1_2_3_3
    uid_1_2_840_10008_5_1_4_31 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_31
    uid_1_2_840_10008_5_1_4_32_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_32_1
    uid_1_2_840_10008_5_1_4_32_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_32_2
    uid_1_2_840_10008_5_1_4_32_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_32_3
    uid_1_2_840_10008_5_1_4_32 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_32
    uid_1_2_840_10008_5_1_4_33 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_33
    uid_1_2_840_10008_5_1_4_34_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_34_1
    uid_1_2_840_10008_5_1_4_34_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_34_2
    uid_1_2_840_10008_5_1_4_34_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_34_3
    uid_1_2_840_10008_5_1_4_34_4 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_34_4
    uid_1_2_840_10008_5_1_4_34_4_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_34_4_1
    uid_1_2_840_10008_5_1_4_34_4_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_34_4_2
    uid_1_2_840_10008_5_1_4_34_4_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_34_4_3
    uid_1_2_840_10008_5_1_4_34_4_4 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_34_4_4
    uid_1_2_840_10008_5_1_4_34_5 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_34_5
    uid_1_2_840_10008_5_1_4_37_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_37_1
    uid_1_2_840_10008_5_1_4_37_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_37_2
    uid_1_2_840_10008_5_1_4_37_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_37_3
    uid_1_2_840_10008_5_1_4_38_1 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_38_1
    uid_1_2_840_10008_5_1_4_38_2 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_38_2
    uid_1_2_840_10008_5_1_4_38_3 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_38_3
    uid_1_2_840_10008_5_1_4_41 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_41
    uid_1_2_840_10008_5_1_4_42 = _gdcm.UIDs_uid_1_2_840_10008_5_1_4_42
    uid_1_2_840_10008_15_0_3_1 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_1
    uid_1_2_840_10008_15_0_3_2 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_2
    uid_1_2_840_10008_15_0_3_3 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_3
    uid_1_2_840_10008_15_0_3_4 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_4
    uid_1_2_840_10008_15_0_3_5 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_5
    uid_1_2_840_10008_15_0_3_6 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_6
    uid_1_2_840_10008_15_0_3_7 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_7
    uid_1_2_840_10008_15_0_3_8 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_8
    uid_1_2_840_10008_15_0_3_9 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_9
    uid_1_2_840_10008_15_0_3_10 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_10
    uid_1_2_840_10008_15_0_3_11 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_11
    uid_1_2_840_10008_15_0_3_12 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_12
    uid_1_2_840_10008_15_0_3_13 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_13
    uid_1_2_840_10008_15_0_3_14 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_14
    uid_1_2_840_10008_15_0_3_15 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_15
    uid_1_2_840_10008_15_0_3_16 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_16
    uid_1_2_840_10008_15_0_3_17 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_17
    uid_1_2_840_10008_15_0_3_18 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_18
    uid_1_2_840_10008_15_0_3_19 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_19
    uid_1_2_840_10008_15_0_3_20 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_20
    uid_1_2_840_10008_15_0_3_21 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_21
    uid_1_2_840_10008_15_0_3_22 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_22
    uid_1_2_840_10008_15_0_3_23 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_23
    uid_1_2_840_10008_15_0_3_24 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_24
    uid_1_2_840_10008_15_0_3_25 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_25
    uid_1_2_840_10008_15_0_3_26 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_26
    uid_1_2_840_10008_15_0_3_27 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_27
    uid_1_2_840_10008_15_0_3_28 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_28
    uid_1_2_840_10008_15_0_3_29 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_29
    uid_1_2_840_10008_15_0_3_30 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_30
    uid_1_2_840_10008_15_0_3_31 = _gdcm.UIDs_uid_1_2_840_10008_15_0_3_31
    uid_1_2_840_10008_15_0_4_1 = _gdcm.UIDs_uid_1_2_840_10008_15_0_4_1
    uid_1_2_840_10008_15_0_4_2 = _gdcm.UIDs_uid_1_2_840_10008_15_0_4_2
    uid_1_2_840_10008_15_0_4_3 = _gdcm.UIDs_uid_1_2_840_10008_15_0_4_3
    uid_1_2_840_10008_15_0_4_4 = _gdcm.UIDs_uid_1_2_840_10008_15_0_4_4
    uid_1_2_840_10008_15_0_4_5 = _gdcm.UIDs_uid_1_2_840_10008_15_0_4_5
    uid_1_2_840_10008_15_0_4_6 = _gdcm.UIDs_uid_1_2_840_10008_15_0_4_6
    uid_1_2_840_10008_15_0_4_7 = _gdcm.UIDs_uid_1_2_840_10008_15_0_4_7
    uid_1_2_840_10008_15_0_4_8 = _gdcm.UIDs_uid_1_2_840_10008_15_0_4_8
    uid_1_2_840_113619_4_2 = _gdcm.UIDs_uid_1_2_840_113619_4_2
    uid_1_2_840_113619_4_3 = _gdcm.UIDs_uid_1_2_840_113619_4_3
    uid_1_3_12_2_1107_5_9_1 = _gdcm.UIDs_uid_1_3_12_2_1107_5_9_1
    uid_1_2_840_113619_4_26 = _gdcm.UIDs_uid_1_2_840_113619_4_26
    uid_1_2_840_113619_4_30 = _gdcm.UIDs_uid_1_2_840_113619_4_30
    uid_2_16_840_1_113709_1_5_1 = _gdcm.UIDs_uid_2_16_840_1_113709_1_5_1
    uid_1_2_840_113543_6_6_1_3_10002 = _gdcm.UIDs_uid_1_2_840_113543_6_6_1_3_10002
    uid_1_2_392_200036_9116_7_8_1_1_1 = _gdcm.UIDs_uid_1_2_392_200036_9116_7_8_1_1_1
    uid_end = _gdcm.UIDs_uid_end
    VerificationSOPClass = _gdcm.UIDs_VerificationSOPClass
    ImplicitVRLittleEndianDefaultTransferSyntaxforDICOM = _gdcm.UIDs_ImplicitVRLittleEndianDefaultTransferSyntaxforDICOM
    ExplicitVRLittleEndian = _gdcm.UIDs_ExplicitVRLittleEndian
    DeflatedExplicitVRLittleEndian = _gdcm.UIDs_DeflatedExplicitVRLittleEndian
    ExplicitVRBigEndian = _gdcm.UIDs_ExplicitVRBigEndian
    JPEGBaselineProcess1DefaultTransferSyntaxforLossyJPEG8BitImageCompression = _gdcm.UIDs_JPEGBaselineProcess1DefaultTransferSyntaxforLossyJPEG8BitImageCompression
    JPEGExtendedProcess24DefaultTransferSyntaxforLossyJPEG12BitImageCompressionProcess4only = _gdcm.UIDs_JPEGExtendedProcess24DefaultTransferSyntaxforLossyJPEG12BitImageCompressionProcess4only
    JPEGExtendedProcess35Retired = _gdcm.UIDs_JPEGExtendedProcess35Retired
    JPEGSpectralSelectionNonHierarchicalProcess68Retired = _gdcm.UIDs_JPEGSpectralSelectionNonHierarchicalProcess68Retired
    JPEGSpectralSelectionNonHierarchicalProcess79Retired = _gdcm.UIDs_JPEGSpectralSelectionNonHierarchicalProcess79Retired
    JPEGFullProgressionNonHierarchicalProcess1012Retired = _gdcm.UIDs_JPEGFullProgressionNonHierarchicalProcess1012Retired
    JPEGFullProgressionNonHierarchicalProcess1113Retired = _gdcm.UIDs_JPEGFullProgressionNonHierarchicalProcess1113Retired
    JPEGLosslessNonHierarchicalProcess14 = _gdcm.UIDs_JPEGLosslessNonHierarchicalProcess14
    JPEGLosslessNonHierarchicalProcess15Retired = _gdcm.UIDs_JPEGLosslessNonHierarchicalProcess15Retired
    JPEGExtendedHierarchicalProcess1618Retired = _gdcm.UIDs_JPEGExtendedHierarchicalProcess1618Retired
    JPEGExtendedHierarchicalProcess1719Retired = _gdcm.UIDs_JPEGExtendedHierarchicalProcess1719Retired
    JPEGSpectralSelectionHierarchicalProcess2022Retired = _gdcm.UIDs_JPEGSpectralSelectionHierarchicalProcess2022Retired
    JPEGSpectralSelectionHierarchicalProcess2123Retired = _gdcm.UIDs_JPEGSpectralSelectionHierarchicalProcess2123Retired
    JPEGFullProgressionHierarchicalProcess2426Retired = _gdcm.UIDs_JPEGFullProgressionHierarchicalProcess2426Retired
    JPEGFullProgressionHierarchicalProcess2527Retired = _gdcm.UIDs_JPEGFullProgressionHierarchicalProcess2527Retired
    JPEGLosslessHierarchicalProcess28Retired = _gdcm.UIDs_JPEGLosslessHierarchicalProcess28Retired
    JPEGLosslessHierarchicalProcess29Retired = _gdcm.UIDs_JPEGLosslessHierarchicalProcess29Retired
    JPEGLosslessNonHierarchicalFirstOrderPredictionProcess14SelectionValue1DefaultTransferSyntaxforLosslessJPEGImageCompression = _gdcm.UIDs_JPEGLosslessNonHierarchicalFirstOrderPredictionProcess14SelectionValue1DefaultTransferSyntaxforLosslessJPEGImageCompression
    JPEGLSLosslessImageCompression = _gdcm.UIDs_JPEGLSLosslessImageCompression
    JPEGLSLossyNearLosslessImageCompression = _gdcm.UIDs_JPEGLSLossyNearLosslessImageCompression
    JPEG2000ImageCompressionLosslessOnly = _gdcm.UIDs_JPEG2000ImageCompressionLosslessOnly
    JPEG2000ImageCompression = _gdcm.UIDs_JPEG2000ImageCompression
    JPEG2000Part2MulticomponentImageCompressionLosslessOnly = _gdcm.UIDs_JPEG2000Part2MulticomponentImageCompressionLosslessOnly
    JPEG2000Part2MulticomponentImageCompression = _gdcm.UIDs_JPEG2000Part2MulticomponentImageCompression
    JPIPReferenced = _gdcm.UIDs_JPIPReferenced
    JPIPReferencedDeflate = _gdcm.UIDs_JPIPReferencedDeflate
    MPEG2MainProfileMainLevel = _gdcm.UIDs_MPEG2MainProfileMainLevel
    RLELossless = _gdcm.UIDs_RLELossless
    RFC2557MIMEencapsulation = _gdcm.UIDs_RFC2557MIMEencapsulation
    XMLEncoding = _gdcm.UIDs_XMLEncoding
    MediaStorageDirectoryStorage = _gdcm.UIDs_MediaStorageDirectoryStorage
    TalairachBrainAtlasFrameofReference = _gdcm.UIDs_TalairachBrainAtlasFrameofReference
    SPM2T1FrameofReference = _gdcm.UIDs_SPM2T1FrameofReference
    SPM2T2FrameofReference = _gdcm.UIDs_SPM2T2FrameofReference
    SPM2PDFrameofReference = _gdcm.UIDs_SPM2PDFrameofReference
    SPM2EPIFrameofReference = _gdcm.UIDs_SPM2EPIFrameofReference
    SPM2FILT1FrameofReference = _gdcm.UIDs_SPM2FILT1FrameofReference
    SPM2PETFrameofReference = _gdcm.UIDs_SPM2PETFrameofReference
    SPM2TRANSMFrameofReference = _gdcm.UIDs_SPM2TRANSMFrameofReference
    SPM2SPECTFrameofReference = _gdcm.UIDs_SPM2SPECTFrameofReference
    SPM2GRAYFrameofReference = _gdcm.UIDs_SPM2GRAYFrameofReference
    SPM2WHITEFrameofReference = _gdcm.UIDs_SPM2WHITEFrameofReference
    SPM2CSFFrameofReference = _gdcm.UIDs_SPM2CSFFrameofReference
    SPM2BRAINMASKFrameofReference = _gdcm.UIDs_SPM2BRAINMASKFrameofReference
    SPM2AVG305T1FrameofReference = _gdcm.UIDs_SPM2AVG305T1FrameofReference
    SPM2AVG152T1FrameofReference = _gdcm.UIDs_SPM2AVG152T1FrameofReference
    SPM2AVG152T2FrameofReference = _gdcm.UIDs_SPM2AVG152T2FrameofReference
    SPM2AVG152PDFrameofReference = _gdcm.UIDs_SPM2AVG152PDFrameofReference
    SPM2SINGLESUBJT1FrameofReference = _gdcm.UIDs_SPM2SINGLESUBJT1FrameofReference
    ICBM452T1FrameofReference = _gdcm.UIDs_ICBM452T1FrameofReference
    ICBMSingleSubjectMRIFrameofReference = _gdcm.UIDs_ICBMSingleSubjectMRIFrameofReference
    BasicStudyContentNotificationSOPClassRetired = _gdcm.UIDs_BasicStudyContentNotificationSOPClassRetired
    StorageCommitmentPushModelSOPClass = _gdcm.UIDs_StorageCommitmentPushModelSOPClass
    StorageCommitmentPushModelSOPInstance = _gdcm.UIDs_StorageCommitmentPushModelSOPInstance
    StorageCommitmentPullModelSOPClassRetired = _gdcm.UIDs_StorageCommitmentPullModelSOPClassRetired
    StorageCommitmentPullModelSOPInstanceRetired = _gdcm.UIDs_StorageCommitmentPullModelSOPInstanceRetired
    ProceduralEventLoggingSOPClass = _gdcm.UIDs_ProceduralEventLoggingSOPClass
    ProceduralEventLoggingSOPInstance = _gdcm.UIDs_ProceduralEventLoggingSOPInstance
    SubstanceAdministrationLoggingSOPClass = _gdcm.UIDs_SubstanceAdministrationLoggingSOPClass
    SubstanceAdministrationLoggingSOPInstance = _gdcm.UIDs_SubstanceAdministrationLoggingSOPInstance
    DICOMUIDRegistry = _gdcm.UIDs_DICOMUIDRegistry
    DICOMControlledTerminology = _gdcm.UIDs_DICOMControlledTerminology
    DICOMApplicationContextName = _gdcm.UIDs_DICOMApplicationContextName
    DetachedPatientManagementSOPClassRetired = _gdcm.UIDs_DetachedPatientManagementSOPClassRetired
    DetachedPatientManagementMetaSOPClassRetired = _gdcm.UIDs_DetachedPatientManagementMetaSOPClassRetired
    DetachedVisitManagementSOPClassRetired = _gdcm.UIDs_DetachedVisitManagementSOPClassRetired
    DetachedStudyManagementSOPClassRetired = _gdcm.UIDs_DetachedStudyManagementSOPClassRetired
    StudyComponentManagementSOPClassRetired = _gdcm.UIDs_StudyComponentManagementSOPClassRetired
    ModalityPerformedProcedureStepSOPClass = _gdcm.UIDs_ModalityPerformedProcedureStepSOPClass
    ModalityPerformedProcedureStepRetrieveSOPClass = _gdcm.UIDs_ModalityPerformedProcedureStepRetrieveSOPClass
    ModalityPerformedProcedureStepNotificationSOPClass = _gdcm.UIDs_ModalityPerformedProcedureStepNotificationSOPClass
    DetachedResultsManagementSOPClassRetired = _gdcm.UIDs_DetachedResultsManagementSOPClassRetired
    DetachedResultsManagementMetaSOPClassRetired = _gdcm.UIDs_DetachedResultsManagementMetaSOPClassRetired
    DetachedStudyManagementMetaSOPClassRetired = _gdcm.UIDs_DetachedStudyManagementMetaSOPClassRetired
    DetachedInterpretationManagementSOPClassRetired = _gdcm.UIDs_DetachedInterpretationManagementSOPClassRetired
    StorageServiceClass = _gdcm.UIDs_StorageServiceClass
    BasicFilmSessionSOPClass = _gdcm.UIDs_BasicFilmSessionSOPClass
    BasicFilmBoxSOPClass = _gdcm.UIDs_BasicFilmBoxSOPClass
    BasicGrayscaleImageBoxSOPClass = _gdcm.UIDs_BasicGrayscaleImageBoxSOPClass
    BasicColorImageBoxSOPClass = _gdcm.UIDs_BasicColorImageBoxSOPClass
    ReferencedImageBoxSOPClassRetired = _gdcm.UIDs_ReferencedImageBoxSOPClassRetired
    BasicGrayscalePrintManagementMetaSOPClass = _gdcm.UIDs_BasicGrayscalePrintManagementMetaSOPClass
    ReferencedGrayscalePrintManagementMetaSOPClassRetired = _gdcm.UIDs_ReferencedGrayscalePrintManagementMetaSOPClassRetired
    PrintJobSOPClass = _gdcm.UIDs_PrintJobSOPClass
    BasicAnnotationBoxSOPClass = _gdcm.UIDs_BasicAnnotationBoxSOPClass
    PrinterSOPClass = _gdcm.UIDs_PrinterSOPClass
    PrinterConfigurationRetrievalSOPClass = _gdcm.UIDs_PrinterConfigurationRetrievalSOPClass
    PrinterSOPInstance = _gdcm.UIDs_PrinterSOPInstance
    PrinterConfigurationRetrievalSOPInstance = _gdcm.UIDs_PrinterConfigurationRetrievalSOPInstance
    BasicColorPrintManagementMetaSOPClass = _gdcm.UIDs_BasicColorPrintManagementMetaSOPClass
    ReferencedColorPrintManagementMetaSOPClassRetired = _gdcm.UIDs_ReferencedColorPrintManagementMetaSOPClassRetired
    VOILUTBoxSOPClass = _gdcm.UIDs_VOILUTBoxSOPClass
    PresentationLUTSOPClass = _gdcm.UIDs_PresentationLUTSOPClass
    ImageOverlayBoxSOPClassRetired = _gdcm.UIDs_ImageOverlayBoxSOPClassRetired
    BasicPrintImageOverlayBoxSOPClassRetired = _gdcm.UIDs_BasicPrintImageOverlayBoxSOPClassRetired
    PrintQueueSOPInstanceRetired = _gdcm.UIDs_PrintQueueSOPInstanceRetired
    PrintQueueManagementSOPClassRetired = _gdcm.UIDs_PrintQueueManagementSOPClassRetired
    StoredPrintStorageSOPClassRetired = _gdcm.UIDs_StoredPrintStorageSOPClassRetired
    HardcopyGrayscaleImageStorageSOPClassRetired = _gdcm.UIDs_HardcopyGrayscaleImageStorageSOPClassRetired
    HardcopyColorImageStorageSOPClassRetired = _gdcm.UIDs_HardcopyColorImageStorageSOPClassRetired
    PullPrintRequestSOPClassRetired = _gdcm.UIDs_PullPrintRequestSOPClassRetired
    PullStoredPrintManagementMetaSOPClassRetired = _gdcm.UIDs_PullStoredPrintManagementMetaSOPClassRetired
    MediaCreationManagementSOPClassUID = _gdcm.UIDs_MediaCreationManagementSOPClassUID
    ComputedRadiographyImageStorage = _gdcm.UIDs_ComputedRadiographyImageStorage
    DigitalXRayImageStorageForPresentation = _gdcm.UIDs_DigitalXRayImageStorageForPresentation
    DigitalXRayImageStorageForProcessing = _gdcm.UIDs_DigitalXRayImageStorageForProcessing
    DigitalMammographyXRayImageStorageForPresentation = _gdcm.UIDs_DigitalMammographyXRayImageStorageForPresentation
    DigitalMammographyXRayImageStorageForProcessing = _gdcm.UIDs_DigitalMammographyXRayImageStorageForProcessing
    DigitalIntraoralXRayImageStorageForPresentation = _gdcm.UIDs_DigitalIntraoralXRayImageStorageForPresentation
    DigitalIntraoralXRayImageStorageForProcessing = _gdcm.UIDs_DigitalIntraoralXRayImageStorageForProcessing
    CTImageStorage = _gdcm.UIDs_CTImageStorage
    EnhancedCTImageStorage = _gdcm.UIDs_EnhancedCTImageStorage
    UltrasoundMultiframeImageStorageRetired = _gdcm.UIDs_UltrasoundMultiframeImageStorageRetired
    UltrasoundMultiframeImageStorage = _gdcm.UIDs_UltrasoundMultiframeImageStorage
    MRImageStorage = _gdcm.UIDs_MRImageStorage
    EnhancedMRImageStorage = _gdcm.UIDs_EnhancedMRImageStorage
    MRSpectroscopyStorage = _gdcm.UIDs_MRSpectroscopyStorage
    NuclearMedicineImageStorageRetired = _gdcm.UIDs_NuclearMedicineImageStorageRetired
    UltrasoundImageStorageRetired = _gdcm.UIDs_UltrasoundImageStorageRetired
    UltrasoundImageStorage = _gdcm.UIDs_UltrasoundImageStorage
    SecondaryCaptureImageStorage = _gdcm.UIDs_SecondaryCaptureImageStorage
    MultiframeSingleBitSecondaryCaptureImageStorage = _gdcm.UIDs_MultiframeSingleBitSecondaryCaptureImageStorage
    MultiframeGrayscaleByteSecondaryCaptureImageStorage = _gdcm.UIDs_MultiframeGrayscaleByteSecondaryCaptureImageStorage
    MultiframeGrayscaleWordSecondaryCaptureImageStorage = _gdcm.UIDs_MultiframeGrayscaleWordSecondaryCaptureImageStorage
    MultiframeTrueColorSecondaryCaptureImageStorage = _gdcm.UIDs_MultiframeTrueColorSecondaryCaptureImageStorage
    StandaloneOverlayStorageRetired = _gdcm.UIDs_StandaloneOverlayStorageRetired
    StandaloneCurveStorageRetired = _gdcm.UIDs_StandaloneCurveStorageRetired
    WaveformStorageTrialRetired = _gdcm.UIDs_WaveformStorageTrialRetired
    GeneralECGWaveformStorage = _gdcm.UIDs_GeneralECGWaveformStorage
    AmbulatoryECGWaveformStorage = _gdcm.UIDs_AmbulatoryECGWaveformStorage
    HemodynamicWaveformStorage = _gdcm.UIDs_HemodynamicWaveformStorage
    CardiacElectrophysiologyWaveformStorage = _gdcm.UIDs_CardiacElectrophysiologyWaveformStorage
    BasicVoiceAudioWaveformStorage = _gdcm.UIDs_BasicVoiceAudioWaveformStorage
    StandaloneModalityLUTStorageRetired = _gdcm.UIDs_StandaloneModalityLUTStorageRetired
    StandaloneVOILUTStorageRetired = _gdcm.UIDs_StandaloneVOILUTStorageRetired
    GrayscaleSoftcopyPresentationStateStorageSOPClass = _gdcm.UIDs_GrayscaleSoftcopyPresentationStateStorageSOPClass
    ColorSoftcopyPresentationStateStorageSOPClass = _gdcm.UIDs_ColorSoftcopyPresentationStateStorageSOPClass
    PseudoColorSoftcopyPresentationStateStorageSOPClass = _gdcm.UIDs_PseudoColorSoftcopyPresentationStateStorageSOPClass
    BlendingSoftcopyPresentationStateStorageSOPClass = _gdcm.UIDs_BlendingSoftcopyPresentationStateStorageSOPClass
    XRayAngiographicImageStorage = _gdcm.UIDs_XRayAngiographicImageStorage
    EnhancedXAImageStorage = _gdcm.UIDs_EnhancedXAImageStorage
    XRayRadiofluoroscopicImageStorage = _gdcm.UIDs_XRayRadiofluoroscopicImageStorage
    EnhancedXRFImageStorage = _gdcm.UIDs_EnhancedXRFImageStorage
    XRay3DAngiographicImageStorage = _gdcm.UIDs_XRay3DAngiographicImageStorage
    XRay3DCraniofacialImageStorage = _gdcm.UIDs_XRay3DCraniofacialImageStorage
    XRayAngiographicBiPlaneImageStorageRetired = _gdcm.UIDs_XRayAngiographicBiPlaneImageStorageRetired
    NuclearMedicineImageStorage = _gdcm.UIDs_NuclearMedicineImageStorage
    RawDataStorage = _gdcm.UIDs_RawDataStorage
    SpatialRegistrationStorage = _gdcm.UIDs_SpatialRegistrationStorage
    SpatialFiducialsStorage = _gdcm.UIDs_SpatialFiducialsStorage
    DeformableSpatialRegistrationStorage = _gdcm.UIDs_DeformableSpatialRegistrationStorage
    SegmentationStorage = _gdcm.UIDs_SegmentationStorage
    RealWorldValueMappingStorage = _gdcm.UIDs_RealWorldValueMappingStorage
    VLImageStorageTrialRetired = _gdcm.UIDs_VLImageStorageTrialRetired
    VLMultiframeImageStorageTrialRetired = _gdcm.UIDs_VLMultiframeImageStorageTrialRetired
    VLEndoscopicImageStorage = _gdcm.UIDs_VLEndoscopicImageStorage
    VideoEndoscopicImageStorage = _gdcm.UIDs_VideoEndoscopicImageStorage
    VLMicroscopicImageStorage = _gdcm.UIDs_VLMicroscopicImageStorage
    VideoMicroscopicImageStorage = _gdcm.UIDs_VideoMicroscopicImageStorage
    VLSlideCoordinatesMicroscopicImageStorage = _gdcm.UIDs_VLSlideCoordinatesMicroscopicImageStorage
    VLPhotographicImageStorage = _gdcm.UIDs_VLPhotographicImageStorage
    VideoPhotographicImageStorage = _gdcm.UIDs_VideoPhotographicImageStorage
    OphthalmicPhotography8BitImageStorage = _gdcm.UIDs_OphthalmicPhotography8BitImageStorage
    OphthalmicPhotography16BitImageStorage = _gdcm.UIDs_OphthalmicPhotography16BitImageStorage
    StereometricRelationshipStorage = _gdcm.UIDs_StereometricRelationshipStorage
    OphthalmicTomographyImageStorage = _gdcm.UIDs_OphthalmicTomographyImageStorage
    TextSRStorageTrialRetired = _gdcm.UIDs_TextSRStorageTrialRetired
    AudioSRStorageTrialRetired = _gdcm.UIDs_AudioSRStorageTrialRetired
    DetailSRStorageTrialRetired = _gdcm.UIDs_DetailSRStorageTrialRetired
    ComprehensiveSRStorageTrialRetired = _gdcm.UIDs_ComprehensiveSRStorageTrialRetired
    BasicTextSRStorage = _gdcm.UIDs_BasicTextSRStorage
    EnhancedSRStorage = _gdcm.UIDs_EnhancedSRStorage
    ComprehensiveSRStorage = _gdcm.UIDs_ComprehensiveSRStorage
    ProcedureLogStorage = _gdcm.UIDs_ProcedureLogStorage
    MammographyCADSRStorage = _gdcm.UIDs_MammographyCADSRStorage
    KeyObjectSelectionDocumentStorage = _gdcm.UIDs_KeyObjectSelectionDocumentStorage
    ChestCADSRStorage = _gdcm.UIDs_ChestCADSRStorage
    XRayRadiationDoseSRStorage = _gdcm.UIDs_XRayRadiationDoseSRStorage
    EncapsulatedPDFStorage = _gdcm.UIDs_EncapsulatedPDFStorage
    EncapsulatedCDAStorage = _gdcm.UIDs_EncapsulatedCDAStorage
    PositronEmissionTomographyImageStorage = _gdcm.UIDs_PositronEmissionTomographyImageStorage
    StandalonePETCurveStorageRetired = _gdcm.UIDs_StandalonePETCurveStorageRetired
    RTImageStorage = _gdcm.UIDs_RTImageStorage
    RTDoseStorage = _gdcm.UIDs_RTDoseStorage
    RTStructureSetStorage = _gdcm.UIDs_RTStructureSetStorage
    RTBeamsTreatmentRecordStorage = _gdcm.UIDs_RTBeamsTreatmentRecordStorage
    RTPlanStorage = _gdcm.UIDs_RTPlanStorage
    RTBrachyTreatmentRecordStorage = _gdcm.UIDs_RTBrachyTreatmentRecordStorage
    RTTreatmentSummaryRecordStorage = _gdcm.UIDs_RTTreatmentSummaryRecordStorage
    RTIonPlanStorage = _gdcm.UIDs_RTIonPlanStorage
    RTIonBeamsTreatmentRecordStorage = _gdcm.UIDs_RTIonBeamsTreatmentRecordStorage
    PatientRootQueryRetrieveInformationModelFIND = _gdcm.UIDs_PatientRootQueryRetrieveInformationModelFIND
    PatientRootQueryRetrieveInformationModelMOVE = _gdcm.UIDs_PatientRootQueryRetrieveInformationModelMOVE
    PatientRootQueryRetrieveInformationModelGET = _gdcm.UIDs_PatientRootQueryRetrieveInformationModelGET
    StudyRootQueryRetrieveInformationModelFIND = _gdcm.UIDs_StudyRootQueryRetrieveInformationModelFIND
    StudyRootQueryRetrieveInformationModelMOVE = _gdcm.UIDs_StudyRootQueryRetrieveInformationModelMOVE
    StudyRootQueryRetrieveInformationModelGET = _gdcm.UIDs_StudyRootQueryRetrieveInformationModelGET
    PatientStudyOnlyQueryRetrieveInformationModelFINDRetired = _gdcm.UIDs_PatientStudyOnlyQueryRetrieveInformationModelFINDRetired
    PatientStudyOnlyQueryRetrieveInformationModelMOVERetired = _gdcm.UIDs_PatientStudyOnlyQueryRetrieveInformationModelMOVERetired
    PatientStudyOnlyQueryRetrieveInformationModelGETRetired = _gdcm.UIDs_PatientStudyOnlyQueryRetrieveInformationModelGETRetired
    ModalityWorklistInformationModelFIND = _gdcm.UIDs_ModalityWorklistInformationModelFIND
    GeneralPurposeWorklistInformationModelFIND = _gdcm.UIDs_GeneralPurposeWorklistInformationModelFIND
    GeneralPurposeScheduledProcedureStepSOPClass = _gdcm.UIDs_GeneralPurposeScheduledProcedureStepSOPClass
    GeneralPurposePerformedProcedureStepSOPClass = _gdcm.UIDs_GeneralPurposePerformedProcedureStepSOPClass
    GeneralPurposeWorklistManagementMetaSOPClass = _gdcm.UIDs_GeneralPurposeWorklistManagementMetaSOPClass
    InstanceAvailabilityNotificationSOPClass = _gdcm.UIDs_InstanceAvailabilityNotificationSOPClass
    RTBeamsDeliveryInstructionStorageSupplement74FrozenDraft = _gdcm.UIDs_RTBeamsDeliveryInstructionStorageSupplement74FrozenDraft
    RTConventionalMachineVerificationSupplement74FrozenDraft = _gdcm.UIDs_RTConventionalMachineVerificationSupplement74FrozenDraft
    RTIonMachineVerificationSupplement74FrozenDraft = _gdcm.UIDs_RTIonMachineVerificationSupplement74FrozenDraft
    UnifiedWorklistandProcedureStepServiceClass = _gdcm.UIDs_UnifiedWorklistandProcedureStepServiceClass
    UnifiedProcedureStepPushSOPClass = _gdcm.UIDs_UnifiedProcedureStepPushSOPClass
    UnifiedProcedureStepWatchSOPClass = _gdcm.UIDs_UnifiedProcedureStepWatchSOPClass
    UnifiedProcedureStepPullSOPClass = _gdcm.UIDs_UnifiedProcedureStepPullSOPClass
    UnifiedProcedureStepEventSOPClass = _gdcm.UIDs_UnifiedProcedureStepEventSOPClass
    UnifiedWorklistandProcedureStepSOPInstance = _gdcm.UIDs_UnifiedWorklistandProcedureStepSOPInstance
    GeneralRelevantPatientInformationQuery = _gdcm.UIDs_GeneralRelevantPatientInformationQuery
    BreastImagingRelevantPatientInformationQuery = _gdcm.UIDs_BreastImagingRelevantPatientInformationQuery
    CardiacRelevantPatientInformationQuery = _gdcm.UIDs_CardiacRelevantPatientInformationQuery
    HangingProtocolStorage = _gdcm.UIDs_HangingProtocolStorage
    HangingProtocolInformationModelFIND = _gdcm.UIDs_HangingProtocolInformationModelFIND
    HangingProtocolInformationModelMOVE = _gdcm.UIDs_HangingProtocolInformationModelMOVE
    ProductCharacteristicsQuerySOPClass = _gdcm.UIDs_ProductCharacteristicsQuerySOPClass
    SubstanceApprovalQuerySOPClass = _gdcm.UIDs_SubstanceApprovalQuerySOPClass
    dicomDeviceName = _gdcm.UIDs_dicomDeviceName
    dicomDescription = _gdcm.UIDs_dicomDescription
    dicomManufacturer = _gdcm.UIDs_dicomManufacturer
    dicomManufacturerModelName = _gdcm.UIDs_dicomManufacturerModelName
    dicomSoftwareVersion = _gdcm.UIDs_dicomSoftwareVersion
    dicomVendorData = _gdcm.UIDs_dicomVendorData
    dicomAETitle = _gdcm.UIDs_dicomAETitle
    dicomNetworkConnectionReference = _gdcm.UIDs_dicomNetworkConnectionReference
    dicomApplicationCluster = _gdcm.UIDs_dicomApplicationCluster
    dicomAssociationInitiator = _gdcm.UIDs_dicomAssociationInitiator
    dicomAssociationAcceptor = _gdcm.UIDs_dicomAssociationAcceptor
    dicomHostname = _gdcm.UIDs_dicomHostname
    dicomPort = _gdcm.UIDs_dicomPort
    dicomSOPClass = _gdcm.UIDs_dicomSOPClass
    dicomTransferRole = _gdcm.UIDs_dicomTransferRole
    dicomTransferSyntax = _gdcm.UIDs_dicomTransferSyntax
    dicomPrimaryDeviceType = _gdcm.UIDs_dicomPrimaryDeviceType
    dicomRelatedDeviceReference = _gdcm.UIDs_dicomRelatedDeviceReference
    dicomPreferredCalledAETitle = _gdcm.UIDs_dicomPreferredCalledAETitle
    dicomTLSCyphersuite = _gdcm.UIDs_dicomTLSCyphersuite
    dicomAuthorizedNodeCertificateReference = _gdcm.UIDs_dicomAuthorizedNodeCertificateReference
    dicomThisNodeCertificateReference = _gdcm.UIDs_dicomThisNodeCertificateReference
    dicomInstalled = _gdcm.UIDs_dicomInstalled
    dicomStationName = _gdcm.UIDs_dicomStationName
    dicomDeviceSerialNumber = _gdcm.UIDs_dicomDeviceSerialNumber
    dicomInstitutionName = _gdcm.UIDs_dicomInstitutionName
    dicomInstitutionAddress = _gdcm.UIDs_dicomInstitutionAddress
    dicomInstitutionDepartmentName = _gdcm.UIDs_dicomInstitutionDepartmentName
    dicomIssuerOfPatientID = _gdcm.UIDs_dicomIssuerOfPatientID
    dicomPreferredCallingAETitle = _gdcm.UIDs_dicomPreferredCallingAETitle
    dicomSupportedCharacterSet = _gdcm.UIDs_dicomSupportedCharacterSet
    dicomConfigurationRoot = _gdcm.UIDs_dicomConfigurationRoot
    dicomDevicesRoot = _gdcm.UIDs_dicomDevicesRoot
    dicomUniqueAETitlesRegistryRoot = _gdcm.UIDs_dicomUniqueAETitlesRegistryRoot
    dicomDevice = _gdcm.UIDs_dicomDevice
    dicomNetworkAE = _gdcm.UIDs_dicomNetworkAE
    dicomNetworkConnection = _gdcm.UIDs_dicomNetworkConnection
    dicomUniqueAETitle = _gdcm.UIDs_dicomUniqueAETitle
    dicomTransferCapability = _gdcm.UIDs_dicomTransferCapability
    __swig_getmethods__["GetUIDString"] = lambda x: _gdcm.UIDs_GetUIDString
    if _newclass:GetUIDString = staticmethod(_gdcm.UIDs_GetUIDString)
    __swig_getmethods__["GetUIDName"] = lambda x: _gdcm.UIDs_GetUIDName
    if _newclass:GetUIDName = staticmethod(_gdcm.UIDs_GetUIDName)
    __swig_getmethods__["GetTransferSyntaxStrings"] = lambda x: _gdcm.UIDs_GetTransferSyntaxStrings
    if _newclass:GetTransferSyntaxStrings = staticmethod(_gdcm.UIDs_GetTransferSyntaxStrings)
    def SetFromUID(*args): return _gdcm.UIDs_SetFromUID(*args)
    def GetName(*args): return _gdcm.UIDs_GetName(*args)
    def __init__(self, *args): 
        this = _gdcm.new_UIDs(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_UIDs
    __del__ = lambda self : None;
UIDs_swigregister = _gdcm.UIDs_swigregister
UIDs_swigregister(UIDs)
UIDs_GetUIDString = _gdcm.UIDs_GetUIDString
UIDs_GetUIDName = _gdcm.UIDs_GetUIDName
UIDs_GetTransferSyntaxStrings = _gdcm.UIDs_GetTransferSyntaxStrings

class Sorter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sorter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sorter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Sorter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Sorter
    __del__ = lambda self : None;
    def Sort(*args): return _gdcm.Sorter_Sort(*args)
    def GetFilenames(*args): return _gdcm.Sorter_GetFilenames(*args)
    def Print(*args): return _gdcm.Sorter_Print(*args)
    def AddSelect(*args): return _gdcm.Sorter_AddSelect(*args)
Sorter_swigregister = _gdcm.Sorter_swigregister
Sorter_swigregister(Sorter)

class IPPSorter(Sorter):
    __swig_setmethods__ = {}
    for _s in [Sorter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPPSorter, name, value)
    __swig_getmethods__ = {}
    for _s in [Sorter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPPSorter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_IPPSorter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_IPPSorter
    __del__ = lambda self : None;
    def Sort(*args): return _gdcm.IPPSorter_Sort(*args)
    def SetComputeZSpacing(*args): return _gdcm.IPPSorter_SetComputeZSpacing(*args)
    def SetZSpacingTolerance(*args): return _gdcm.IPPSorter_SetZSpacingTolerance(*args)
    def GetZSpacing(*args): return _gdcm.IPPSorter_GetZSpacing(*args)
IPPSorter_swigregister = _gdcm.IPPSorter_swigregister
IPPSorter_swigregister(IPPSorter)

class Spectroscopy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Spectroscopy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Spectroscopy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Spectroscopy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Spectroscopy
    __del__ = lambda self : None;
Spectroscopy_swigregister = _gdcm.Spectroscopy_swigregister
Spectroscopy_swigregister(Spectroscopy)

class Printer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Printer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Printer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Printer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Printer
    __del__ = lambda self : None;
    def SetFile(*args): return _gdcm.Printer_SetFile(*args)
    VERBOSE_STYLE = _gdcm.Printer_VERBOSE_STYLE
    CONDENSED_STYLE = _gdcm.Printer_CONDENSED_STYLE
    XML = _gdcm.Printer_XML
    def SetStyle(*args): return _gdcm.Printer_SetStyle(*args)
    def GetPrintStyle(*args): return _gdcm.Printer_GetPrintStyle(*args)
    def Print(*args): return _gdcm.Printer_Print(*args)
Printer_swigregister = _gdcm.Printer_swigregister
Printer_swigregister(Printer)

class Dumper(Printer):
    __swig_setmethods__ = {}
    for _s in [Printer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dumper, name, value)
    __swig_getmethods__ = {}
    for _s in [Printer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dumper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Dumper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Dumper
    __del__ = lambda self : None;
Dumper_swigregister = _gdcm.Dumper_swigregister
Dumper_swigregister(Dumper)

class Orientation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Orientation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Orientation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Orientation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Orientation
    __del__ = lambda self : None;
    def Print(*args): return _gdcm.Orientation_Print(*args)
    UNKNOWN = _gdcm.Orientation_UNKNOWN
    AXIAL = _gdcm.Orientation_AXIAL
    CORONAL = _gdcm.Orientation_CORONAL
    SAGITTAL = _gdcm.Orientation_SAGITTAL
    OBLIQUE = _gdcm.Orientation_OBLIQUE
    __swig_getmethods__["GetType"] = lambda x: _gdcm.Orientation_GetType
    if _newclass:GetType = staticmethod(_gdcm.Orientation_GetType)
    __swig_getmethods__["GetLabel"] = lambda x: _gdcm.Orientation_GetLabel
    if _newclass:GetLabel = staticmethod(_gdcm.Orientation_GetLabel)
Orientation_swigregister = _gdcm.Orientation_swigregister
Orientation_swigregister(Orientation)
Orientation_GetType = _gdcm.Orientation_GetType
Orientation_GetLabel = _gdcm.Orientation_GetLabel

class Fiducials(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fiducials, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fiducials, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Fiducials(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Fiducials
    __del__ = lambda self : None;
Fiducials_swigregister = _gdcm.Fiducials_swigregister
Fiducials_swigregister(Fiducials)

class Waveform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Waveform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Waveform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Waveform(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Waveform
    __del__ = lambda self : None;
Waveform_swigregister = _gdcm.Waveform_swigregister
Waveform_swigregister(Waveform)

class PersonName(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PersonName, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PersonName, name)
    __repr__ = _swig_repr
    MaxNumberOfComponents = _gdcm.PersonName_MaxNumberOfComponents
    MaxLength = _gdcm.PersonName_MaxLength
    __swig_setmethods__["Component"] = _gdcm.PersonName_Component_set
    __swig_getmethods__["Component"] = _gdcm.PersonName_Component_get
    if _newclass:Component = _swig_property(_gdcm.PersonName_Component_get, _gdcm.PersonName_Component_set)
    Separator = _gdcm.PersonName_Separator
    Padding = _gdcm.PersonName_Padding
    def GetNumberOfComponents(*args): return _gdcm.PersonName_GetNumberOfComponents(*args)
    def GetMaxLength(*args): return _gdcm.PersonName_GetMaxLength(*args)
    def SetBlob(*args): return _gdcm.PersonName_SetBlob(*args)
    def SetComponents(*args): return _gdcm.PersonName_SetComponents(*args)
    def Print(*args): return _gdcm.PersonName_Print(*args)
    def __init__(self, *args): 
        this = _gdcm.new_PersonName(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_PersonName
    __del__ = lambda self : None;
PersonName_swigregister = _gdcm.PersonName_swigregister
PersonName_swigregister(PersonName)

class IconImage(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IconImage, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IconImage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_IconImage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_IconImage
    __del__ = lambda self : None;
    def Print(*args): return _gdcm.IconImage_Print(*args)
    def SetDataElement(*args): return _gdcm.IconImage_SetDataElement(*args)
    def GetDataElement(*args): return _gdcm.IconImage_GetDataElement(*args)
    def SetColumns(*args): return _gdcm.IconImage_SetColumns(*args)
    def SetRows(*args): return _gdcm.IconImage_SetRows(*args)
    def SetDimension(*args): return _gdcm.IconImage_SetDimension(*args)
    def GetColumns(*args): return _gdcm.IconImage_GetColumns(*args)
    def GetRows(*args): return _gdcm.IconImage_GetRows(*args)
    def GetPixelFormat(*args): return _gdcm.IconImage_GetPixelFormat(*args)
    def SetPixelFormat(*args): return _gdcm.IconImage_SetPixelFormat(*args)
    def GetPhotometricInterpretation(*args): return _gdcm.IconImage_GetPhotometricInterpretation(*args)
    def SetPhotometricInterpretation(*args): return _gdcm.IconImage_SetPhotometricInterpretation(*args)
    def IsEmpty(*args): return _gdcm.IconImage_IsEmpty(*args)
    def GetBuffer(*args): return _gdcm.IconImage_GetBuffer(*args)
IconImage_swigregister = _gdcm.IconImage_swigregister
IconImage_swigregister(IconImage)

class Curve(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Curve, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Curve, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gdcm.delete_Curve
    __del__ = lambda self : None;
    def Print(*args): return _gdcm.Curve_Print(*args)
    def GetAsPoints(*args): return _gdcm.Curve_GetAsPoints(*args)
    __swig_getmethods__["GetNumberOfCurves"] = lambda x: _gdcm.Curve_GetNumberOfCurves
    if _newclass:GetNumberOfCurves = staticmethod(_gdcm.Curve_GetNumberOfCurves)
    def Update(*args): return _gdcm.Curve_Update(*args)
    def SetGroup(*args): return _gdcm.Curve_SetGroup(*args)
    def GetGroup(*args): return _gdcm.Curve_GetGroup(*args)
    def SetDimensions(*args): return _gdcm.Curve_SetDimensions(*args)
    def GetDimensions(*args): return _gdcm.Curve_GetDimensions(*args)
    def SetNumberOfPoints(*args): return _gdcm.Curve_SetNumberOfPoints(*args)
    def GetNumberOfPoints(*args): return _gdcm.Curve_GetNumberOfPoints(*args)
    def SetTypeOfData(*args): return _gdcm.Curve_SetTypeOfData(*args)
    def GetTypeOfData(*args): return _gdcm.Curve_GetTypeOfData(*args)
    def GetTypeOfDataDescription(*args): return _gdcm.Curve_GetTypeOfDataDescription(*args)
    def SetCurveDescription(*args): return _gdcm.Curve_SetCurveDescription(*args)
    def SetDataValueRepresentation(*args): return _gdcm.Curve_SetDataValueRepresentation(*args)
    def GetDataValueRepresentation(*args): return _gdcm.Curve_GetDataValueRepresentation(*args)
    def SetCurve(*args): return _gdcm.Curve_SetCurve(*args)
    def IsEmpty(*args): return _gdcm.Curve_IsEmpty(*args)
    def Decode(*args): return _gdcm.Curve_Decode(*args)
    def __init__(self, *args): 
        this = _gdcm.new_Curve(*args)
        try: self.this.append(this)
        except: self.this = this
Curve_swigregister = _gdcm.Curve_swigregister
Curve_swigregister(Curve)
Curve_GetNumberOfCurves = _gdcm.Curve_GetNumberOfCurves

class DICOMDIR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DICOMDIR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DICOMDIR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_DICOMDIR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_DICOMDIR
    __del__ = lambda self : None;
DICOMDIR_swigregister = _gdcm.DICOMDIR_swigregister
DICOMDIR_swigregister(DICOMDIR)

class Validate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Validate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Validate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Validate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Validate
    __del__ = lambda self : None;
    def SetFile(*args): return _gdcm.Validate_SetFile(*args)
    def GetValidatedFile(*args): return _gdcm.Validate_GetValidatedFile(*args)
    def Validation(*args): return _gdcm.Validate_Validation(*args)
Validate_swigregister = _gdcm.Validate_swigregister
Validate_swigregister(Validate)

class ApplicationEntity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplicationEntity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApplicationEntity, name)
    __repr__ = _swig_repr
    MaxNumberOfComponents = _gdcm.ApplicationEntity_MaxNumberOfComponents
    MaxLength = _gdcm.ApplicationEntity_MaxLength
    __swig_setmethods__["Internal"] = _gdcm.ApplicationEntity_Internal_set
    __swig_getmethods__["Internal"] = _gdcm.ApplicationEntity_Internal_get
    if _newclass:Internal = _swig_property(_gdcm.ApplicationEntity_Internal_get, _gdcm.ApplicationEntity_Internal_set)
    Separator = _gdcm.ApplicationEntity_Separator
    Padding = _gdcm.ApplicationEntity_Padding
    def IsValid(*args): return _gdcm.ApplicationEntity_IsValid(*args)
    def Squeeze(*args): return _gdcm.ApplicationEntity_Squeeze(*args)
    def SetBlob(*args): return _gdcm.ApplicationEntity_SetBlob(*args)
    def Print(*args): return _gdcm.ApplicationEntity_Print(*args)
    def __init__(self, *args): 
        this = _gdcm.new_ApplicationEntity(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_ApplicationEntity
    __del__ = lambda self : None;
ApplicationEntity_swigregister = _gdcm.ApplicationEntity_swigregister
ApplicationEntity_swigregister(ApplicationEntity)

class DictPrinter(Printer):
    __swig_setmethods__ = {}
    for _s in [Printer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DictPrinter, name, value)
    __swig_getmethods__ = {}
    for _s in [Printer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DictPrinter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_DictPrinter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_DictPrinter
    __del__ = lambda self : None;
    def Print(*args): return _gdcm.DictPrinter_Print(*args)
DictPrinter_swigregister = _gdcm.DictPrinter_swigregister
DictPrinter_swigregister(DictPrinter)

class FilenameGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilenameGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FilenameGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_FilenameGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_FilenameGenerator
    __del__ = lambda self : None;
    def SetPattern(*args): return _gdcm.FilenameGenerator_SetPattern(*args)
    def GetPattern(*args): return _gdcm.FilenameGenerator_GetPattern(*args)
    def Generate(*args): return _gdcm.FilenameGenerator_Generate(*args)
    def SetNumberOfFilenames(*args): return _gdcm.FilenameGenerator_SetNumberOfFilenames(*args)
    def GetNumberOfFilenames(*args): return _gdcm.FilenameGenerator_GetNumberOfFilenames(*args)
    def GetFilename(*args): return _gdcm.FilenameGenerator_GetFilename(*args)
    def GetFilenames(*args): return _gdcm.FilenameGenerator_GetFilenames(*args)
FilenameGenerator_swigregister = _gdcm.FilenameGenerator_swigregister
FilenameGenerator_swigregister(FilenameGenerator)

class Version(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Version, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Version, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["GetVersion"] = lambda x: _gdcm.Version_GetVersion
    if _newclass:GetVersion = staticmethod(_gdcm.Version_GetVersion)
    __swig_getmethods__["GetMajorVersion"] = lambda x: _gdcm.Version_GetMajorVersion
    if _newclass:GetMajorVersion = staticmethod(_gdcm.Version_GetMajorVersion)
    __swig_getmethods__["GetMinorVersion"] = lambda x: _gdcm.Version_GetMinorVersion
    if _newclass:GetMinorVersion = staticmethod(_gdcm.Version_GetMinorVersion)
    __swig_getmethods__["GetBuildVersion"] = lambda x: _gdcm.Version_GetBuildVersion
    if _newclass:GetBuildVersion = staticmethod(_gdcm.Version_GetBuildVersion)
Version_swigregister = _gdcm.Version_swigregister
Version_swigregister(Version)
Version_GetVersion = _gdcm.Version_GetVersion
Version_GetMajorVersion = _gdcm.Version_GetMajorVersion
Version_GetMinorVersion = _gdcm.Version_GetMinorVersion
Version_GetBuildVersion = _gdcm.Version_GetBuildVersion

class Filename(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Filename, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Filename, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Filename(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetFileName(*args): return _gdcm.Filename_GetFileName(*args)
    def GetPath(*args): return _gdcm.Filename_GetPath(*args)
    def GetName(*args): return _gdcm.Filename_GetName(*args)
    def GetExtension(*args): return _gdcm.Filename_GetExtension(*args)
    def ToUnixSlashes(*args): return _gdcm.Filename_ToUnixSlashes(*args)
    def IsEmpty(*args): return _gdcm.Filename_IsEmpty(*args)
    def IsIdentical(*args): return _gdcm.Filename_IsIdentical(*args)
    __swig_destroy__ = _gdcm.delete_Filename
    __del__ = lambda self : None;
Filename_swigregister = _gdcm.Filename_swigregister
Filename_swigregister(Filename)

class EnumeratedValues(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnumeratedValues, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnumeratedValues, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_EnumeratedValues(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_EnumeratedValues
    __del__ = lambda self : None;
EnumeratedValues_swigregister = _gdcm.EnumeratedValues_swigregister
EnumeratedValues_swigregister(EnumeratedValues)

class Patient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Patient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Patient, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Patient(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Patient
    __del__ = lambda self : None;
Patient_swigregister = _gdcm.Patient_swigregister
Patient_swigregister(Patient)

class Study(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Study, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Study, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Study(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Study
    __del__ = lambda self : None;
Study_swigregister = _gdcm.Study_swigregister
Study_swigregister(Study)

class ModuleEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleEntry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_ModuleEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetName(*args): return _gdcm.ModuleEntry_SetName(*args)
    def GetName(*args): return _gdcm.ModuleEntry_GetName(*args)
    def SetType(*args): return _gdcm.ModuleEntry_SetType(*args)
    def GetType(*args): return _gdcm.ModuleEntry_GetType(*args)
    def SetDescription(*args): return _gdcm.ModuleEntry_SetDescription(*args)
    def GetDescription(*args): return _gdcm.ModuleEntry_GetDescription(*args)
    def __str__(*args): return _gdcm.ModuleEntry___str__(*args)
    __swig_destroy__ = _gdcm.delete_ModuleEntry
    __del__ = lambda self : None;
ModuleEntry_swigregister = _gdcm.ModuleEntry_swigregister
ModuleEntry_swigregister(ModuleEntry)

class Module(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Module, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Module, name)
    __repr__ = _swig_repr
    def Begin(*args): return _gdcm.Module_Begin(*args)
    def End(*args): return _gdcm.Module_End(*args)
    def __init__(self, *args): 
        this = _gdcm.new_Module(*args)
        try: self.this.append(this)
        except: self.this = this
    def Clear(*args): return _gdcm.Module_Clear(*args)
    def AddModuleEntry(*args): return _gdcm.Module_AddModuleEntry(*args)
    def GetModuleEntry(*args): return _gdcm.Module_GetModuleEntry(*args)
    __swig_destroy__ = _gdcm.delete_Module
    __del__ = lambda self : None;
Module_swigregister = _gdcm.Module_swigregister
Module_swigregister(Module)

class Modules(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modules, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Modules, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Modules(*args)
        try: self.this.append(this)
        except: self.this = this
    def Clear(*args): return _gdcm.Modules_Clear(*args)
    def AddModule(*args): return _gdcm.Modules_AddModule(*args)
    def GetModule(*args): return _gdcm.Modules_GetModule(*args)
    def IsEmpty(*args): return _gdcm.Modules_IsEmpty(*args)
    __swig_destroy__ = _gdcm.delete_Modules
    __del__ = lambda self : None;
Modules_swigregister = _gdcm.Modules_swigregister
Modules_swigregister(Modules)

class Defs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Defs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Defs, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Defs(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Defs
    __del__ = lambda self : None;
    def GetModules(*args): return _gdcm.Defs_GetModules(*args)
    def GetMacros(*args): return _gdcm.Defs_GetMacros(*args)
    def GetIODs(*args): return _gdcm.Defs_GetIODs(*args)
    def IsEmpty(*args): return _gdcm.Defs_IsEmpty(*args)
Defs_swigregister = _gdcm.Defs_swigregister
Defs_swigregister(Defs)

class IOD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IOD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_IOD(*args)
        try: self.this.append(this)
        except: self.this = this
    def Clear(*args): return _gdcm.IOD_Clear(*args)
    def AddIODEntry(*args): return _gdcm.IOD_AddIODEntry(*args)
    __swig_destroy__ = _gdcm.delete_IOD
    __del__ = lambda self : None;
IOD_swigregister = _gdcm.IOD_swigregister
IOD_swigregister(IOD)

class IODs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IODs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IODs, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_IODs(*args)
        try: self.this.append(this)
        except: self.this = this
    def Clear(*args): return _gdcm.IODs_Clear(*args)
    def AddIOD(*args): return _gdcm.IODs_AddIOD(*args)
    def GetIOD(*args): return _gdcm.IODs_GetIOD(*args)
    __swig_destroy__ = _gdcm.delete_IODs
    __del__ = lambda self : None;
IODs_swigregister = _gdcm.IODs_swigregister
IODs_swigregister(IODs)

class TableEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TableEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TableEntry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_TableEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_TableEntry
    __del__ = lambda self : None;
TableEntry_swigregister = _gdcm.TableEntry_swigregister
TableEntry_swigregister(TableEntry)

class DefinedTerms(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefinedTerms, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefinedTerms, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_DefinedTerms(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_DefinedTerms
    __del__ = lambda self : None;
DefinedTerms_swigregister = _gdcm.DefinedTerms_swigregister
DefinedTerms_swigregister(DefinedTerms)

class Series(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Series, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Series, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Series(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Series
    __del__ = lambda self : None;
Series_swigregister = _gdcm.Series_swigregister
Series_swigregister(Series)

class IODEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IODEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IODEntry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_IODEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetIE(*args): return _gdcm.IODEntry_SetIE(*args)
    def GetIE(*args): return _gdcm.IODEntry_GetIE(*args)
    def SetName(*args): return _gdcm.IODEntry_SetName(*args)
    def GetName(*args): return _gdcm.IODEntry_GetName(*args)
    def SetRef(*args): return _gdcm.IODEntry_SetRef(*args)
    def GetRef(*args): return _gdcm.IODEntry_GetRef(*args)
    def SetUsage(*args): return _gdcm.IODEntry_SetUsage(*args)
    def GetUsage(*args): return _gdcm.IODEntry_GetUsage(*args)
    __swig_destroy__ = _gdcm.delete_IODEntry
    __del__ = lambda self : None;
IODEntry_swigregister = _gdcm.IODEntry_swigregister
IODEntry_swigregister(IODEntry)

class Rescaler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rescaler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rescaler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Rescaler(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Rescaler
    __del__ = lambda self : None;
    def Rescale(*args): return _gdcm.Rescaler_Rescale(*args)
    def InverseRescale(*args): return _gdcm.Rescaler_InverseRescale(*args)
    def SetIntercept(*args): return _gdcm.Rescaler_SetIntercept(*args)
    def SetSlope(*args): return _gdcm.Rescaler_SetSlope(*args)
    def SetPixelFormat(*args): return _gdcm.Rescaler_SetPixelFormat(*args)
    def ComputeInterceptSlopePixelType(*args): return _gdcm.Rescaler_ComputeInterceptSlopePixelType(*args)
    def SetMinMaxForPixelType(*args): return _gdcm.Rescaler_SetMinMaxForPixelType(*args)
    def ComputePixelTypeFromMinMax(*args): return _gdcm.Rescaler_ComputePixelTypeFromMinMax(*args)
Rescaler_swigregister = _gdcm.Rescaler_swigregister
Rescaler_swigregister(Rescaler)
__lshift__ = _gdcm.__lshift__

class SegmentedPaletteColorLookupTable(LookupTable):
    __swig_setmethods__ = {}
    for _s in [LookupTable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SegmentedPaletteColorLookupTable, name, value)
    __swig_getmethods__ = {}
    for _s in [LookupTable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SegmentedPaletteColorLookupTable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_SegmentedPaletteColorLookupTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_SegmentedPaletteColorLookupTable
    __del__ = lambda self : None;
    def Print(*args): return _gdcm.SegmentedPaletteColorLookupTable_Print(*args)
    def SetLUT(*args): return _gdcm.SegmentedPaletteColorLookupTable_SetLUT(*args)
SegmentedPaletteColorLookupTable_swigregister = _gdcm.SegmentedPaletteColorLookupTable_swigregister
SegmentedPaletteColorLookupTable_swigregister(SegmentedPaletteColorLookupTable)

class Unpacker12Bits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Unpacker12Bits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Unpacker12Bits, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gdcm.new_Unpacker12Bits(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gdcm.delete_Unpacker12Bits
    __del__ = lambda self : None;
    def Unpack(*args): return _gdcm.Unpacker12Bits_Unpack(*args)
Unpacker12Bits_swigregister = _gdcm.Unpacker12Bits_swigregister
Unpacker12Bits_swigregister(Unpacker12Bits)

PUB_DICT_PATH = _gdcm.PUB_DICT_PATH
GDCM_SOURCE_DIR = _gdcm.GDCM_SOURCE_DIR
GDCM_EXECUTABLE_OUTPUT_PATH = _gdcm.GDCM_EXECUTABLE_OUTPUT_PATH
GDCM_LIBRARY_OUTPUT_PATH = _gdcm.GDCM_LIBRARY_OUTPUT_PATH
GDCM_CMAKE_INSTALL_PREFIX = _gdcm.GDCM_CMAKE_INSTALL_PREFIX
GDCM_INSTALL_INCLUDE_DIR = _gdcm.GDCM_INSTALL_INCLUDE_DIR
GDCM_MAJOR_VERSION = _gdcm.GDCM_MAJOR_VERSION
GDCM_MINOR_VERSION = _gdcm.GDCM_MINOR_VERSION
GDCM_BUILD_VERSION = _gdcm.GDCM_BUILD_VERSION
GDCM_VERSION = _gdcm.GDCM_VERSION


